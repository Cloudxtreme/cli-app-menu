# Â©2013 Copyright 2013 Robert D. Chin
#
# +----------------------------------------+
# |             Revision Date              |
# +----------------------------------------+
# REVDATE="November-03-2013 00:09"
#
# +----------------------------------------+
# |       Function f_menu_cat_games        |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: BGA, MENU_ITEM, MAX
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_cat_games () {
      f_initvars_menu_app "BGA"
      until [ $BGA -eq 0 ]
      do    # Start of Application Category until loop.
#f_menu_app_games_arcade #BGA Arcade Games   - Action controlled by keyboard and player's reflexes.
#f_menu_app_games_board #BGA Board Games    - Classic board games.
#f_menu_app_games_card #BGA Card Games     - Played with a deck of playing cards.
#f_menu_app_games_mud #BGA MUD Games      - Multi-user dungeon adventure games.
#f_menu_app_games_puzzle #BGA Puzzles        - Tetris-clones, create punch card/paper tape codes.
#f_menu_app_games_quiz #BGA Quiz Games     - Challenge your mind.
#f_menu_app_games_rpg #BGA RPG Games      - Single-player role-playing games.
#f_menu_app_games_simulation #BGA Sims/Anims     - Simulations and animations. ASCII movies.
#f_menu_app_games_strategy #BGA Strategy Games - 1-2 Players.
#f_menu_app_games_word #BGA Word Games     - Boggle, hangman, pig-latin, create banners.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Games Category Menu"
            DELIMITER="#BGA" #BGA This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read BGA
            f_menu_item_process $BGA  # Outputs $MENU_ITEM.
            done  # End of Game Category until loop.
            #
      unset BGA MENU_ITEM  # Throw out this variable.

} # End of function f_menu_cat_games
#
# +----------------------------------------+
# |    Function f_menu_app_games_arcade    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGA, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_arcade () {
      f_initvars_menu_app "MGA"
      until [ $MGA -eq 0 ]
      do    # Start of Arcade Games until loop.
#0^0^0^0^0 #MGA asciijump   - Ski jump game.
#0^0^0^0^0 #MGA asciiportal - ASCIIpOrtal, go through a side-scrolling puzzle maze.
#0^0^0^0^1 #MGA freesweep   - Minesweeper game.
#0^0^0^0^0 #MGA moon-buggy  - Drive a moon buggy on the moon.
#0^0^0^1^1 #MGA ninvaders   - Space invaders-like game ncurses-based.
#0^0^0^0^0 #MGA nsnake      - Variation of BSD's snake game.
#f_menu_app_games_pacman^0^0^0^0 #MGA Pac-Man     - "Pac-Man" clones.
#0^0^0^0^0 #MGA robots      - Be chased by killer robots.
#0^0^0^18^0 #MGA snake       - Be chased by a snake while collecting money.
#0^0^0^0^0 #MGA spacezero   - Space combat in real-time, 2-player network game.
#f_menu_app_games_tetris^0^0^0^0 #MGA Tetris      - "Tetris" clones.
#0^0^0^9^0 #MGA worm        - Be a growing worm, don't crash into yourself.
#0^1^0^1^0 #MGA xorcurses   - based on Xor released in 1987 by Astral Software.
#f_menu_app_games_arcade2^0^0^0^0 #MGA MORE...     - For more arcade game applications.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Arcade Game Menu"
            DELIMITER="#MGA" #MGA This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGA
            f_menu_item_process $MGA  # Outputs $MENU_ITEM.
            done  # End of Arcade Games until loop.
            #
      unset MGA MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_arcade
#
# +----------------------------------------+
# |    Function f_menu_app_games_arcade2   |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGB, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_arcade2 () {
      f_initvars_menu_app "MGB"
      until [ $MGB -eq 0 ]
      do    # Start of Arcade2 Games until loop.
#0^0^0^18^0 #MGB zsnake - Variation of BSD's snake game.
#0^1^0^0^0 #MGB ztrack - First-person car racing game in amazing 3-D ASCII.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Arcade2 Game Menu"
            DELIMITER="#MGB" #MGB This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGB
            f_menu_item_process $MGB  # Outputs $MENU_ITEM.
            done  # End of Arcade2 Games until loop.
            #
      unset MGB MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_arcade2
#
# +----------------------------------------+
# |    Function f_menu_app_games_tetris    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGL, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_tetris () {
      f_initvars_menu_app "MGL"
      until [ $MGL -eq 0 ]
      do    # Start of Tetris Games until loop.
#0^0^0^0^0 #MGL bastet   - Tetris-like game.
#0^0^0^0^0 #MGL ctris    - Tetris-like game.
#f_run_and_exit "netris" "netris"^0^0^0^0 #MGL netris   - Tetris-like game.
#0^0^0^5^0 #MGL petris   - Tetris-like game.
#0^0^0^5^0 #MGL vitetris - tetris-like game; 1-2 players, network play, custom graphics etc.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Tetris-like Game Menu"
            DELIMITER="#MGL" #MGL This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGL
            f_menu_item_process $MGL  # Outputs $MENU_ITEM.
            done  # End of Tetris Games until loop.
            #
      unset MGL MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_tetris
#
# +----------------------------------------+
# |    Function f_menu_app_games_pacman    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGM, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_pacman () {
      f_initvars_menu_app "MGM"
      until [ $MGM -eq 0 ]
      do    # Start of "Pac-Man"-like Games until loop.
#0^0^0^0^1 #MGM myman          - "Pac-Man"-like game, ncurses-based.
#0^0^0^0^1 #MGM pacman4console - "Pac-Man"-like game, ncurses-based.
#0^0^0^0^0 #MGM yaourt         - "Pac-Man"-like game, ncurses-based.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="\"Pac-Man\"-like Game Menu"
            DELIMITER="#MGM" #MGM This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGM
            f_menu_item_process $MGM  # Outputs $MENU_ITEM.
            done  # End of "Pac-Man"-like Games until loop.
            #
      unset MGM MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_pacman
#
# +----------------------------------------+
# |       Function f_install_xorcurses     |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: APP_NAME, MENU_ITEM (both set to null).
#
f_install_xorcurses () {
      if [ ! -r "/usr/local/share/XorCurses" ] ; then
         clear  # blank screen
         echo "This script will install XorCurses without using a software package manager."
         echo
         echo "If you wish to de-install XorCurses, you will have to delete files manually"
         echo "by typing: \"sudo rm -r /usr/local/bin/ /usr/local/share/XorCurses\"."
         echo
         echo "This script will install \"libncurses-dev\" and \"ncurses-dev\", if needed."
         echo "Afterwards, \"XorCurses\" will be installed."
         echo
         echo -n "Do you wish to continue (y/N)? "
         read ANS
         #
         # Yes, Install XorCurses.
         if [ "$ANS" = "Y" -o "$ANS" = "y" ] ; then
            # Install libncurses-dev and ncurses-dev as pre-requisites.
            f_ncurses
            if [ $ERROR -eq 0 ] ; then
               # Error code 1 $?=1 means no --help available.
               # Error code 0 (zero) where $?=0 means no error.
               #
               # Since dependencies are installed, now install XorCurses.
               f_install2_xorcurses
               APP_NAME="xorcurses" # Set to correct name for f_application_run.
               APP_NAME_INSTALL=$APP_NAME # Set for web_install if needed.
            fi
         else
            # No, Do not install XorCurses.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run XorCurses.
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         fi
         unset ANS  # Throw out this variable.
      fi
} # End of function f_install_xorcurses
#
# +----------------------------------------+
# |       Function f_install2_xorcurses    |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: APP_NAME, MENU_ITEM (both set to null).
#
f_install2_xorcurses () {
      clear  # blank screen
      echo "This script will automatically download and install \"XorCurses\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your home folder."
      echo "2. Download \"XorCurses\" using wget from:"
      echo "   http://jwm-art.net/art/archive"
      echo "3. Decompress and create the installation subdirectory ~/bin/xorcurses*"
      echo "4. Install XorCurses via:"
      echo "                           make"
      echo "                           sudo make install"
      echo
      echo "   Installs files to /usr/local/bin/ and /usr/local/share/XorCurses."
      echo
      echo "5. Allow users to run XorCurses by setting permissions to r-x or 755 for all users."
      echo "6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your home/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      cd ~/bin
      # 
      # 2. Download "XorCurses" from "http://jwm-art.net/art/archive" by using wget.
      wget http://jwm-art.net/art/archive/XorCurses-0.2.2.tar.bz2
      #
      # 3. Decompress and create the installation subdirectory ~/bin/xorcurses*.
      tar -xf XorCurses-0.2.2.tar.bz2
      cd ~/bin/XorCurses-0.2.2
      #
      # 4. Make and install XorCurses.
      make
      sudo make install
      # 
      # 5. Allow users to run XorCurses by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/local/bin/xorcurses
      #
      # 6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc.
      # Is the directory /usr/local/bin in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"XorCurses\"."
      echo
      echo "To run \"XorCurses\", select it on the \"Arcade Game Menu\" or \"Puzzle Game Menu\"."
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install2_xorcurses
#
# +----------------------------------------+
# |        Function f_install_ztrack       |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: APP_NAME, MENU_ITEM (both set to null).
#
f_install_ztrack () {
      if [ ! -r "/usr/games/ztrack" ] ; then
         clear  # blank screen
         echo "This script will install Ztrack without using a software package manager."
         echo
         echo "If you wish to de-install Ztrack, you will have to delete files manually"
         echo "by typing: \"sudo rm /usr/games/ztrack\"."
         echo
         echo "This script will install \"libncurses-dev\" and \"ncurses-dev\", if needed."
         echo "Afterwards, \"Ztrack\" will be installed."
         echo
         echo -n "Do you wish to continue (y/N)? "
         read ANS
         #
         # Yes, Install Ztrack.
         if [ "$ANS" = "Y" -o "$ANS" = "y" ] ; then
            # Install libncurses-dev and ncurses-dev as pre-requisites.
            f_ncurses
            if [ $ERROR -eq 0 ] ; then
               # Error code 1 $?=1 means no --help available.
               # Error code 0 (zero) where $?=0 means no error.
               #
               # Since dependencies are installed, now install Ztrack.
               f_install2_ztrack
               APP_NAME="ztrack" # Set to correct name for f_application_run.
               APP_NAME_INSTALL=$APP_NAME # Set for web_install if needed.
           fi
         else
            # No, Do not install Ztrack.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run Ztrack.
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         fi
         unset ANS  # Throw out this variable.
      fi
} # End of function f_install_ztrack
#
# +----------------------------------------+
# |         Function f_install2_ztrack     |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: APP_NAME, MENU_ITEM (both set to null).
#
f_install2_ztrack () {
      clear  # blank screen
      echo "This script will automatically download and install \"Ztrack\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your home folder."
      echo "2. Download \"Ztrack\" using wget from:"
      echo "   http://www.ibiblio.org/pub/Linux/games/arcade"
      echo "3. Decompress and create the installation subdirectory ~/bin/ztrack*"
      echo "4. Install Ztrack via:"
      echo "                           make"
      echo "                           sudo make install"
      echo
      echo "   Installs files to /usr/local/bin/."
      echo
      echo "5. Allow users to run Ztrack by setting permissions to r-x or 755 for all users."
      echo "6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your home/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      # 
      # 2. Download "Ztrack" from "http://www.ibiblio.org/pub/Linux/games/arcade/ztrack-1.0.tar.gz" by using wget.
      cd ~/bin
      wget http://www.ibiblio.org/pub/Linux/games/arcade/ztrack-1.0.tar.gz
      #
      # 3. Decompress and create the installation subdirectory ~/bin/ztrack*.
      tar -xf ztrack-1.0.tar.gz
      #
      # 4. Make and install Ztrack.
      cd ~/bin/ztrack*
      make
      sudo make install
      #
      # 5. Allow users to run Ztrack by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/games/ztrack*
      #
      # 6. Add directory \"/usr/games\" to your PATH command in ~/.bashrc.
      # Is the directory /usr/games in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/games"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/games"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"Ztrack\"."
      echo
      echo "To run \"Ztrack\", select it on the \"Arcade Game Menu\" or \"Puzzle Game Menu\"."
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install2_ztrack
#
# +----------------------------------------+
# |     Function f_menu_app_games_board    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGC, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_board () {
      f_initvars_menu_app "MGC"
      until [ $MGC -eq 0 ]
      do    # Start of Board Games until loop.
#1^0^0^1^0 #MGC atom4      - Board game strategy 2-player ncurses-based.
#0^0^0^1^0 #MGC backgammon - Backgammon.
#0^0^0^1^0 #MGC gnubg      - Gnu Backgammon played either from console or GTK+ GUI.
#0^0^0^2^0 #MGC monop      - Monopoly-like game.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Board Games Menu"
            DELIMITER="#MGC" #MGC This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGC
            f_menu_item_process $MGC  # Outputs $MENU_ITEM.
            done  # End of Board Games until loop.
            #
      unset MGC MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_board
#
# +----------------------------------------+
# |            Function f_atom4            |
# +----------------------------------------+
#
f_atom4 () {
      APP_NAME="atom4 -mt"
} # End of f_atom4
#
# +----------------------------------------+
# |     Function f_menu_app_games_card     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGD, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_card () {
      f_initvars_menu_app "MGD"
      until [ $MGD -eq 0 ]
      do    # Start of Card Games until loop.
#0^0^0^0^0 #MGD canfield - Solitaire card game with betting.
#f_run_and_exit "Cribbage" "cribbage"^0^0^0^0 #MGD cribbage - Cribbage Card game.
#0^0^0^0^0 #MGD dsol     - dSol Solitaire card game.
#0^0^0^0^0 #MGD freecell - Freecell card game.
#0^0^0^0^0 #MGD go-fish  - Go Fish card game.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Card Game Menu"
            DELIMITER="#MGD" #MGD This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGD
            f_menu_item_process $MGD  # Outputs $MENU_ITEM.
            done  # End of Card Games until loop.
            #
      unset MGD MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_card
#
# +----------------------------------------+      
# |      Function f_menu_app_games_mud     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGE, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_mud () {
      f_initvars_menu_app "MGE"
      until [ $MGE -eq 0 ]
      do    # Start of MUD Games until loop.
#0^0^0^0^1 #MGE crawl    - Explore a cave, retrieve the Orb of Zot.
#0^0^0^0^1 #MGE tintin++ - Telnet client to play MUDs (Multi-User Dungeons).
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="MUD Game Menu"
            DELIMITER="#MGE" #MGE This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGE
            f_menu_item_process $MGE  # Outputs $MENU_ITEM.
            done  # End of MUD Games until loop.
            #
      unset MGE MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_mud
#
# +----------------------------------------+
# |    Function f_menu_app_games_puzzle    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGF, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_puzzle () {
      f_initvars_menu_app "MGF"
      until [ $MGF -eq 0 ]
      do    # Start of Puzzle Games until loop.
#0^0^0^0^0 #MGF asciiportal - ASCIIpOrtal, go through a side-scrolling puzzle maze.
#f_run_and_exit "bcd" "bcd"^0^0^0^0 #MGF bcd         - Reformat input as a punch card.
#0^0^0^0^1 #MGF dab         - 2-players try to complete the most boxes.
#0^0^0^0^0 #MGF braincurses - Guess the pattern of 4 pegs in 4 colors.
#0^0^0^0^0 #MGF greed       - Greed numbers game, ncurses-based.
#0^0^0^0^0 #MGF masterm     - Guess the pattern of 4 pegs in 5 colors.
#0^0^0^0^0 #MGF nsuduko     - Suduko game.
#f_run_and_exit "ppt" "ppt"^0^0^0^0 #MGF ppt         - Reformat input as a paper tape.
#0^0^0^0^0 #MGF textmaze    - Find the exit to the maze.
#0^1^0^1^0 #MGF xorcurses   - based on Xor released in 1987 by Astral Software.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Puzzle Game Menu"
            DELIMITER="#MGF" #MGF This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGF
            f_menu_item_process $MGF  # Outputs $MENU_ITEM.
            done  # End of Puzzle Games Applications until loop.
            #
      unset MGF MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_puzzle
#
# +----------------------------------------+
# |      Function f_menu_app_games_quiz    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGG, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_quiz () {
      f_initvars_menu_app "MGG"
      until [ $MGG -eq 0 ]
      do    # Start of Quiz Games until loop.
#0^0^0^10^0 #MGG arithmetic - Basic arithmetic quiz.
#0^0^0^0^0 #MGG geekcode   - Code tells others how geeky you are.
#0^0^0^10^0 #MGG morse      - Morse code training.
#0^0^0^1^1 #MGG quiz       - Quiz with choice of assorted topics.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Quiz Game Menu"
            DELIMITER="#MGG" #MGG This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGG
            f_menu_item_process $MGG  # Outputs $MENU_ITEM.
            done  # End of Quiz Games until loop.
            #
      unset MGG MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_quiz
#
# +----------------------------------------+
# |      Function f_menu_app_games_rpg     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGH, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_rpg () {
      f_initvars_menu_app "MGH"
      until [ $MGH -eq 0 ]
      do    # Start of RPG Games until loop.
#0^0^0^7^1 #MGH adventure  - Explore Colossal Cave. 
#0^0^0^0^1 #MGH battlestar - Tropical adventure game.
#0^0^0^0^1 #MGH GearHead   - Post-nuclear apocalyptic game with 150 machines of destruction.
#0^0^0^0^1 #MGH hack       - Explore the Dungeons of Doom.
#0^0^0^0^1 #MGH nethack    - Retrieve the Amulet of Yendor in the  20th dungeon level.
#0^0^0^0^1 #MGH overkill   - 2D ASCII shooter game.
#0^0^0^0^1 #MGH phantasia  - Fight monsters and other players.
#0^0^0^0^1 #MGH slashem    - Enter the Dungeons of Doom.
#0^0^0^0^1 #MGH wump       - Hunt the Wumpus, watch out for bats, pits.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="RPG Game Menu"
            DELIMITER="#MGH" #MGH This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGH
            f_menu_item_process $MGH  # Outputs $MENU_ITEM.
            done  # End of RPG Games until loop.
            #
      unset MGH MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_rpg
#
# +----------------------------------------+
# |  Function f_menu_app_games_simulation  |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGI, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_simulation () {
      f_initvars_menu_app "MGI"
      until [ $MGI -eq 0 ]
      do    # Start of Simulation Games until loop.
#f_run_and_exit "Air Traffic Controller" "atc"^0^0^0^1 #MGI atc       - Air traffic controller.
#0^0^0^1^0 #MGI bb        - ASCII-art movie demo based on AAlib.
#0^0^0^1^0 #MGI sail      - Command a Man O'War fighting ship.
#0^0^0^0^0 #MGI sl        - Steam locomotive (when you mis-type 'ls' command).
#f_starwars^0^0^0^0 #MGI star wars - Star Wars movie in ASCII.
#0^0^0^16^0 #MGI trek      - Star Trek blast Klingons.
#0^1^0^0^0 #MGI ztrack    - First-person car racing game.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Simulation Games and Animation Menu"
            DELIMITER="#MGI" #MGI This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGI
            f_menu_item_process $MGI  # Outputs $MENU_ITEM.
            done  # End of Simulation Games until loop.
            #
      unset MGI MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_simulation
#
# +----------------------------------------+
# |           Function f_starwars          |
# +----------------------------------------+
#
f_starwars () {
      clear # Blank the screen.
      echo "Star Wars ASCII Movie"
      echo
      echo The movie is played by running command:
      echo telnet towel.blinkenlights.nl
      echo
      echo If telnet hangs while trying the ip-address,
      echo then re-run this program and try again.
      echo
      f_run_and_exit "Star Wars ASCII Movie" "telnet towel.blinkenlights.nl"
}  #End of function f_starwars
#
# +----------------------------------------+
# |   Function f_menu_app_games_strategy   |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGJ, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_strategy () {
      f_initvars_menu_app "MGJ"
      until [ $MGJ -eq 0 ]
      do    # Start of Strategy Games until loop.
#0^0^0^1^0 #MGJ empire     - war game build armies, planes, ships, capture cities.
#0^0^0^0^0 #MGJ gomoku     - 2-player game of 5-in-a-row.
#0^0^0^0^0 #MGJ hunt       - Multi-user game. Kill everyone else.
#0^0^0^0^0 #MGJ mille      - Travel 700 miles card game.
#0^0^0^0^0 #MGJ vms-empire - "Risk"-like game of moving armies to conquer continents.
#1^0^0^0^1 #MGJ wargames   - Computer prompt from movie "War Games". 
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Strategy Game Menu"
            DELIMITER="#MGJ" #MGJ This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGJ
            f_menu_item_process $MGJ  # Outputs $MENU_ITEM.
            done  # End of Strategy Games until loop.
            #
      unset MGJ MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_strategy
#
# +----------------------------------------+
# |            Function f_wargames         |
# +----------------------------------------+
#
f_wargames () {
      clear # Blank the screen.
      echo "wargames - Question asked by the WOPR super-computer."
      echo
      echo "From the 1983 movie 'WarGames' starring Matthew Broderick, Ally Sheedy,"
      echo "Dabney Coleman, and John Wood. David (Matthew Broderick) unknowingly hacks into"
      echo "the backdoor of a top-secret U.S. Air Force super-computer."
      echo "The WOPR (War Operation Planned Response) controls the U.S. nuclear arsenal."
      echo
      echo "Notice the computer equipment David uses, the acoustic modem, and floppy drive."
      echo
      echo "WOPR asks this question when David first hacks the backdoor, making David think"
      echo "that it is simply a recreational program."
      echo
      f_press_enter_key_to_continue
} # End of f_wargames
#
# +----------------------------------------+
# |     Function f_menu_app_games_word     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MGK, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_games_word () {
      f_initvars_menu_app "MGK"
      until [ $MGK -eq 0 ]
      do    # Start of Word Games until loop.
#0^0^0^10^0 #MGK boggle  - Word search game.
#0^0^0^10^0 #MGK figlet  - Creates banner with outline font.
#0^0^0^0^1 #MGK hangman - Classic hangman word game.
#0^0^0^10^1 #MGK hodie   - Date and time in Latin.
#0^0^0^10^0 #MGK pig     - Converts text into pig-latin.
#1^0^0^0^1 #MGK rev     - Reverse typing (not Boston Red Sox "Reverse the Curse").
#0^0^0^0^1 #MGK rl      - Randomize Lines scrambles words of a text file.
#0^0^0^0^1 #MGK shuf    - Randomize Lines scrambles words of a text file.
#0^0^0^10^0 #MGK toilet  - Creates banner with bold font.
            #
            THIS_FILE="mod_apps-games.lib"
            MENU_TITLE="Word Game Menu"
            DELIMITER="#MGK" #MGK This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MGK
            f_menu_item_process $MGK  # Outputs $MENU_ITEM.
            done  # End of Word Games until loop.
            #
      unset MGK MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_games_word
#
# +----------------------------------------+
# |             Function f_rev             |
# +----------------------------------------+
#
f_rev () {
      # If APP_NAME has no spaces, then neither [OPTIONS] nor file name are specified.
      if [[ ! "$APP_NAME" == *" "* ]] ; then
         clear # Blank the screen.
         echo "rev - takes a text file or standard input (keyboard) and reverses the words."
         echo
         echo "Usage:" 
         echo "rev [-V] [-h] file ..."
         echo
         echo "*** For more help type: 'man $APP_NAME'"
         echo "                        '$APP_NAME --help'"
         echo
         echo -n "Enter name of text file to reverse: "
         read ANS
         if [ -z $ANS ] ; then   #String has zero length.
            clear # Blank the screen.
            echo "Missing filename."
            echo "Usage: rev <filename>"
            echo
            echo "Since no filename, now run 'rev' in interactive mode."
            echo
            echo "Interactive usage:"
            echo "Now type the word(s) or sentence to reverse."
            echo
            f_how_to_quit_application "<Ctrl>-D" "no-clear"
            APP_NAME="rev"
            f_application_run
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         elif [ -r $ANS ] ; then   #Filename exists and is readable.
            APP_NAME="rev $ANS"
            f_application_run
         else
            echo "The file $ANS is either missing or cannot be read."
            APP_NAME=-1 # Usually f_application_run sets APP_NAME=-1
                        # for valid menu choices but it's not run here.
                        # If not -1, then f_application_bad_menu_choice
                        # below will consider it a bad choice and will
                        # set PRESS_KEY=0 whereas we need it set to 1.
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
         fi
      fi
      APP_NAME=""
} # End of function f_rev
#
