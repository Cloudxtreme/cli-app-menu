# Â©2013 Copyright 2013 Robert D. Chin
#
# +----------------------------------------+
# |             Revision Date              |
# +----------------------------------------+
# REVDATE="November-05-2013 19:02"
#
# +----------------------------------------+
# |    Function f_menu_app_screen_savers   |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MSS, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_screen_savers () {
      f_initvars_menu_app "MSS"
      until [ "$MSS" = "0" ]
      do    # Start of Screen-saver Applications until loop.
            #f_hint^0^0^8:NC^0 #MSS aafire       - Fire on screen.
            #f_hint^1^0^22:NC^0 #MSS asciiquarium - Aquarium on screen.
            #f_hint^0^0^8:NC^0 #MSS boinctui     - Not a screen-saver but an idle-CPU BOINC software manager.
            #f_hint^1^0^23:NC^0 #MSS bsod         - Simulate Microsoft XP "Blue screen of death".
            #f_hint^1^0^8:NC^0 #MSS cclock       - Digital clock with huge numbers fills entire screen.
            #f_hint^0^0^8:NC^0 #MSS cmatrix      - Matrix-like screen-saver.
            #f_hint^0^0^8:NC^0 #MSS mrzoom       - Displays fractal images. A Mandelbrot fractal explorer.
            #f_hint^0^0^8:NC^0 #MSS ncmatrix     - Matrix-like screen-saver and network traffic visualizer.
            #f_hint^0^0^8:NC^0 #MSS rain         - Rain on screen.
            #f_hint^0^0^8:NC^0 #MSS termsaver    - screensaver for text terminals.
            #f_hint^0^0^8:NC^0 #MSS ticker       - scrolls text across the screen.
            #f_hint^0^0^8:NC^0 #MSS tty-clock    - Display a digital clack full-screen.
            #f_hint^0^0^8:NC^0 #MSS weatherspect - Displays weather information with wallpaper.
            #f_hint^0^0^8:NC^0 #MSS worms        - Worms wiggle on the screen.
            #
            THIS_FILE="mod_apps-screensaver.lib"
            MENU_TITLE="Screen-saver Applications Menu"
            DELIMITER="#MSS" #MSS This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MSS
            f_menu_item_process $MSS  # Outputs $MENU_ITEM.
      done   # End of Screen-saver Applications until loop.
            #
      unset MSS MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_screen_savers
#
# +----------------------------------------+
# |     Function f_install_asciiquarium    |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: APP_NAME, MENU_ITEM (both set to null).
#
f_install_asciiquarium () {
      if [ ! -r "/usr/local/bin/asciiquarium" ] ; then
         clear  # blank screen
         echo "This script will install \"Curses\" and \"Term::Animation\", if needed."
         echo "Afterwards, \"ASCIIQuarium\" will be installed."
         echo
         echo -n "Do you wish to continue (y/N)? "
         read ANS
         #
         # Yes, Install ASCIIQuarium.
         if [ "$ANS" = "Y" -o "$ANS" = "y" ] ; then
            clear  # blank screen
            echo "This script will automatically download and install \"Curses\"."
            echo
            # Check if Curses is installed as a prerequisite.
            APP_NAME="libcurses-perl"
            f_application_install
            if [ "$ERROR" != "0" ] ; then
               # Failure to install Curses.
               echo
               echo "Installation of \"Curses\" failed."
               echo " Skipping installation of \"Term::Animation\" and \"ASCIIQuarium\"."
               echo
               echo -n "Press '"Enter"' key to continue."
               read X
               unset X  # Throw out this variable.
               #
               # Do not install ASCIIQuarium.
               MENU_ITEM_NAME="" # Null so f_application_run does not try to run asciiquarium
                                 # when it's not installed.
               APP_NAME=""       # Also prevents checking for Quit Clause.
            else
               # Success at installing Curses.
               echo
               echo "Installation of \"Curses\" is successful."
               echo
               echo -n "Press '"Enter"' key to continue."
               read X
               unset X  # Throw out this variable.
               # Check if Term::Animation is installed as a prerequisite.
               if [ ! -r "/usr/local/bin/term-animation" ] ; then
                  # Term::Animation not installed, install Term::Animation.
                  f_install_term-animation
               fi
               #
               # Since dependencies are installed, now install ASCIIQuarium.
               f_install2_asciiquarium
               APP_NAME="asciiquarium" # Set to correct name for f_application_run.
               APP_NAME_INSTALL=$APP_NAME # Set for web_install if needed.
            fi
         else
            # No, Do not install ASCIIQuarium.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run asciiquarium
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
         fi
         unset ANS # Throw out this variable.
      fi
} # End of function f_install_asciiquarium
#
# +----------------------------------------+
# |    Function f_install_term-animation   |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: None.
#
f_install_term-animation () {
      clear  # blank screen
      echo "This script will automatically download and install \"Term::Animation\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your home folder."
      echo "2. Download \"Term::Animation\" from:"
      echo "   \"http:=//search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.6.tar.gz\""
      echo "   by using wget."
      echo "3. Decompress and create the installation subdirectory ~/Term-Animation*"
      echo "4. Install Term::Animation via:"
      echo "                                 perl Makefile.PL"
      echo "                                 make"
      echo "                                 make test"
      echo "                                 make install"
      echo
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your home/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      cd ~/bin
      #
      # 2. Download "Term::Animation" from:
      #    http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.6.tar.gz
      # by using wget.
      wget http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.6.tar.gz
      #
      # 3. Decompress and create the installation subdirectory ~/bin/Term-Animation*
      tar -xvzf Term-Animation-2.6.tar.gz
      cd Term-Animation-2.6
      #
      # 4. Install Term::Animation via "perl Makefile.PL", "make", "make test", "make install".
      perl Makefile.PL
      make
      make test
      sudo make install
      echo
      echo "Finished running installation script for \"Term::Animation\"."
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install_term-animation
#
# +----------------------------------------+
# |     Function f_install2_asciiquarium   |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: None.
#
f_install2_asciiquarium () {
      clear  # blank screen
      echo "This script will automatically download and install \"ASCIIQuarium\"."
      echo "The application itself is a single perl script so perl is a prerequisite."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your home folder."
      echo "2. Download \"asciiquarium\" from \"http://www.robobunny.com\" by using wget."
      echo "3. Decompress and create the installation subdirectory ~/asciiquarium*"
      echo "4. Copy asciiquarium to /usr/local/bin directory."
      echo "5. Allow users to run asciiquarium by setting permissions to r-x or 755 for all users."
      echo "6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your home/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      cd ~/bin
      #
      # 2. Download "asciiaquarium" from robobunny.com by using wget.
      wget http://www.robobunny.com/projects/asciiquarium/asciiquarium.tar.gz
      #
      # 3. Decompress and create the installation subdirectory ~/bin/asciiquarium
      tar -xvzf asciiquarium.tar.gz
      cd ~/bin/asciiquarium*/
      #
      # 4. Copy asciiquarium to /usr/local/bin directory.
      if [ ! -d "/usr/local/bin" ] ; then
         # Target directory is missing, so create it.
	 sudo mkdir -p /usr/local/bin
      fi
      sudo cp ~/bin/asciiquarium*/asciiquarium /usr/local/bin/
      #
      # 5. Allow users to run asciiquarium by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/local/bin/asciiquarium
      #
      # 6. Add directory /usr/local/bin to your PATH command in ~/.bashrc.
      # Is the directory /usr/local/bin in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"ASCIIQuarium\"."
      echo
      echo "To run \"ASCIIQuarium\", select it on the \"Screen-saver Applications Menu\"."
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install2_asciiquarium
#
# +----------------------------------------+
# |         Function f_install_bsod        |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: APP_NAME, MENU_ITEM (both set to null).
#
f_install_bsod () {
      if [ ! -r "/usr/local/bin/bsod" ] ; then
         clear  # blank screen
         echo "This script will install bsod without using a software package manager."
         echo
         echo "If you wish to de-install bsod, you will have to delete files manually"
         echo "by typing: \"sudo rm /usr/local/bin/bsod\"."
         echo
         echo "This script will install \"libncurses-dev\" and \"ncurses-dev\", if needed."
         echo "Afterwards, \"bosd\" will be installed."
         echo
         echo -n "Do you wish to continue (y/N)? "
         read ANS
         #
         # Yes, Install bsod.
         if [ "$ANS" = "Y" -o "$ANS" = "y" ] ; then
            # Install libncurses-dev and ncurses-dev as pre-requisites.
            f_ncurses
            if [ "$ERROR" = "0" ] ; then
               # Error code 1 $?=1 means no --help available.
               # Error code 0 (zero) where $?=0 means no error.
               #
               # Since dependencies are installed, now install bsod.
               f_install2_bsod
               APP_NAME="bsod" # Set to correct name for f_application_run.
               APP_NAME_INSTALL=$APP_NAME # Set for web_install if needed.
            fi
         else
            # No, Do not install bsod.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run bsod.
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         fi
         unset ANS # Throw out this variable.
      fi
} # End of function f_install_bsod
#
# +----------------------------------------+
# |         Function f_install2_bsod       |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: None.
#
f_install2_bsod () {
      clear  # blank screen
      echo "This script will automatically download and install \"bsod\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your home folder."
      echo "2. Download \"bsod\" from \"http://www.vanheusden.com/bsod/\" by using wget."
      echo "3. Decompress and create the installation subdirectory ~/bin/bsod*"
      echo "4. Install Ztrack via:"
      echo "                           sudo make install"
      echo
      echo "5. Copy \"bsod\" to /usr/local/bin directory."
      echo "6. Allow users to run \"bsod\" by setting permissions to r-x or 755 for all users."
      echo "7. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your home/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      cd ~/bin
      #
      # 2. Download "bsod" from .com by using wget.
      wget http://www.vanheusden.com/bsod/bsod-0.1.tgz
      #
      # 3. Decompress and create the installation subdirectory ~/bin/bsod
      tar -xvzf bsod-0.1.tgz
      cd ~/bin/bsod*/
      #
      # 4. If needed, create /usr/local/bin directory.
      if [ ! -d "/usr/local/bin" ] ; then
         # Target directory is missing, so create it.
	 sudo mkdir -p /usr/local/bin
      fi
      # 5. Make and install bsod.
      sudo make install
      #
      # 5. Allow users to run bsod by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/local/bin/bsod
      #
      # 6. Add directory /usr/local/bin to your PATH command in ~/.bashrc.
      # Is the directory /usr/local/bin in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"bsod\"."
      echo
      echo "To run \"bsod\", select it on the \"Screen-saver Applications Menu\"."
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install2_bsod
#
# +----------------------------------------+
# |       Function f_install_cclock        |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: None.
# Outputs: None.
#
f_install_cclock () {
      if [ ! -r "/usr/bin/cclock" ] ; then
         clear  # blank screen
         echo "This script will install \"cclock\" without using a software package manager."
         echo
         echo "If you wish to de-install \"'cclock\", you will have to delete files manually"
         echo "by typing: \"sudo rm /usr/bin/cclock /usr/share/man/man1/cclock.1\"."
         echo
         echo "This script will install \"libncurses-dev\" and \"ncurses-dev\", if needed."
         echo "Afterwards, \"cclock\" will be installed."
         echo
         echo -n "Do you wish to continue (y/N)? "
         read ANS
         #
         # Yes, Install cclock.
         if [ "$ANS" = "Y" -o "$ANS" = "y" ] ; then
            # Install libncurses-dev and ncurses-dev as pre-requisites.
            f_ncurses
            if [ "$ERROR" = "0" ] ; then
               # Error code 1 $?=1 means no --help available.
               # Error code 0 (zero) where $?=0 means no error.
               #
               # Since dependencies are installed, now install Ztrack.
               f_install2_cclock
               APP_NAME="cclock" # Set to correct name for f_application_run.
               APP_NAME_INSTALL=$APP_NAME # Set for web_install if needed.
            fi
         else
            # No, Do not install cclock.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run cclock.
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
            PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
         fi
         unset ANS
      fi
} # End of f_install_cclock
#
# +----------------------------------------+
# |         Function f_install2_cclock     |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: APP_NAME, MENU_ITEM (both set to null).
#
f_install2_cclock () {
      clear  # blank screen
      echo "This script will automatically download and install \"cclock\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your home folder."
      echo "2. Download \"cclock\" using wget from:"
      echo "   http://sourceforge.net/projects/cclock/files/latest/download"
      echo "3. Decompress and create the installation subdirectory ~/bin/cclock*"
      echo "4. Install cclock via:"
      echo "                           sudo make install"
      echo
      echo "   Installs files to \"/usr/bin/\" and \"/usr/share/man/man1/cclock.1\"."
      echo
      echo "5. Allow users to run cclock by setting permissions to r-x or 755 for all users."
      echo "6. Add directory \"/usr/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your home/bin folder.
      cd ~
      if [ ! -d "~/bin" ] ; then
         # Target directory is missing, so create it.
	 mkdir ~/bin
      fi
      # 
      # 2. Download "cclock" from "http://sourceforge.net/projects/cclock/files/latest/download"
      #    by using wget.
      cd ~/bin
      wget http://sourceforge.net/projects/cclock/files/latest/download/cclock-0.96.tar.bz2
      #
      # 3. Decompress and create the installation subdirectory ~/bin/cclock*.
      tar -xf cclock*
      #
      # 4. Make and install cclock.
      cd ~/bin/cclock*
      sudo make install
      #
      # 5. Allow users to run cclock by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/bin/cclock*
      #
      # 6. Add directory \"/usr/bin\" to your PATH command in ~/.bashrc.
      # Is the directory /usr/bin in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/bin"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/bin"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Finished running installation script for \"cclock\"."
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
} # End of function f_install2_cclock
#
f_hint () {
      clear  # blank screen
      echo "To use as a screensaver with an inactivity time-out:"
      echo
      echo "1. Install application \"screen\" (under System Category Menu/Screens Menu)."
      echo
      echo "2. Create file \"~/.screenrc\ in your home directory."
      echo
      echo "   File \"~/.screenrc\" should contain the following lines:"
      echo
      echo "        blankerprg $APP_NAME"
      echo "        idle 120 blanker"
      echo
      echo "   Where \"idle 120\" is the number of seconds of inactivity time-out."
      echo "   You can change it from 120 to any number of seconds you want."
      echo
      echo
      # f_press_enter_key_to_continue
} # End of function f_hint

