# Â©2013 Copyright 2013 Robert D. Chin
#
# +----------------------------------------+
# |             Revision Date              |
# +----------------------------------------+
# REVDATE="October-22-2013 01:34"
#
# +----------------------------------------+
# |    Function f_menu_app_screen_savers   |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: MSS, MENU_ITEM, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER.
#
f_menu_app_screen_savers () {
      f_initvars_menu_app "MSS"
      until [ $MSS -eq 0 ]
      do    # Start of Screen-saver Applications until loop.
            #0^0^0^8:NC^0 #MSS aafire       - Fire on screen.
            #1^0^0^22^0 #MSS asciiquarium - Aquarium on screen.
            #0^0^0^8:NC^0 #MSS boinctui     - Not a screen-saver but an idle-CPU BOINC software manager.
            #0^0^0^8:NC^0 #MSS bsod         - Simulate Microsoft XP "Blue screen of death".
            #0^0^0^8:NC^0 #MSS cmatrix      - Matrix-like screen-saver.
            #0^0^0^8:NC^0 #MSS mrzoom       - Displays fractal images. A Mandelbrot fractal explorer.
            #0^0^0^8:NC^0 #MSS rain         - Rain on screen.
            #0^0^0^8:NC^0 #MSS termsaver    - screensaver for text terminals.
            #0^0^0^8:NC^0 #MSS ticker       - scrolls text across the screen.
            #0^0^0^8:NC^0 #MSS tty-clock    - Display a digital clack full-screen.
            #0^0^0^8:NC^0 #MSS weatherspect - Displays weather information with wallpaper.
            #0^0^0^8:NC^0 #MSS worms        - Worms wiggle on the screen.
            #
            THIS_FILE="mod_apps-screensaver.lib"
            MENU_TITLE="Screen-saver Applications Menu"
            DELIMITER="#MSS" #MSS This 3rd field prevents awk from printing this line into menu options. 
            #
            f_show_menu "$MENU_TITLE" "$DELIMITER" 
            read MSS
            f_menu_item_process $MSS  # Outputs $MENU_ITEM.
     done  # End of Screen-saver Applications until loop.
            #
      unset MSS MENU_ITEM  # Throw out this variable.
} # End of f_menu_app_screen_savers
#
# +----------------------------------------+
# |           Function f_asciiquarium      |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: APP_NAME, MENU_ITEM (both set to null).
#
f_asciiquarium () {
      if [ ! -r "/usr/local/bin/asciiquarium" ] ; then
         clear  # blank screen
         echo "This script will install \"Curses\" and \"Term::Animation\", if needed."
         echo "Afterwards, \"ASCIIQuarium\" will be installed."
         echo
         echo -n "Do you wish to continue (y/N)? "
         read ANS
         #
         # Yes, Install ASCIIQuarium.
         if [ "$ANS" = "Y" -o "$ANS" = "y" ] ; then
            clear  # blank screen
            echo "This script will automatically download and install \"Curses\"."
            echo
            # Check if Curses is installed as a prerequisite.
            APP_NAME="libcurses-perl"
            f_application_install
            if [ $ERROR -ne 0 ] ; then
               # Failure to install Curses.
               echo "Installation of \"Curses\" failed."
               echo " Skipping installation of \"Term::Animation\" and \"ASCIIQuarium\"."
               echo
               echo -n "Press '"Enter"' key to continue."
               read X
               unset X  # Throw out this variable.
               #
               # Do not install ASCIIQuarium.
               MENU_ITEM_NAME="" # Null so f_application_run does not try to run asciiquarium
                                 # when it's not installed.
               APP_NAME=""       # Also prevents checking for Quit Clause.
            else
               # Success at installing Curses.
               echo
               echo
               echo "Installation of \"Curses\" is successful."
               echo
               echo -n "Press '"Enter"' key to continue."
               read X
               unset X  # Throw out this variable.
               # Check if Term::Animation is installed as a prerequisite.
               if [ ! -r "/usr/local/bin/term-animation" ] ; then
                  # Term::Animation not installed, install Term::Animation.
                  f_term-animation_install
               fi
               #
               # Since dependencies are installed, now install ASCIIQuarium.
               f_asciiquarium_install
               APP_NAME="asciiquarium" # Set to correct name for f_application_run.
            fi
         else
            # No, Do not install ASCIIQuarium.
            MENU_ITEM_NAME="" # Null so f_application_run does not try to run asciiquarium
                              # when it's not installed.
            APP_NAME=""       # Also prevents checking for Quit Clause.
         fi
         unset ANS

      fi
} # End of function f_asciiquarium
#
# +----------------------------------------+
# |        Function f-curses_install       |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: None.
#
f_curses_install () {
      clear  # blank screen
      echo "This script will automatically download and install \"Curses\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your home folder."
      echo "2. Download \"Curses\" from:"
      echo "   \"http://search.cpan.org/CPAN/authors/id/G/GI/GIRAFFED/Curses-1.28.tgz\""
      echo "   by using wget."
      echo "3. Decompress and create the installation subdirectory ~/Curses*"
      echo "4. You must manually install \"Curses\" from source code in ~/Curses*"
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your home folder.
      cd ~
      #
      # 2. Download "Curses" from "http://search.cpan.org/CPAN/authors/id/G/GI/GIRAFFED/Curses-1.28.tgz" by using wget.
      wget http://search.cpan.org/CPAN/authors/id/G/GI/GIRAFFED/Curses-1.28.tgz
      #
      # 3. Decompress and create the installation subdirectory ~/curses*
      tar -xvzf Curses-1.28.tgz
      #
      echo
      echo "Downloading of \"Curses\" is complete."
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
} # End of function f_curses_install
#
# +----------------------------------------+
# |    Function f_term-animation_install   |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: None.
#
f_term-animation_install () {
      clear  # blank screen
      echo "This script will automatically download and install \"Term::Animation\"."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your home folder."
      echo "2. Download \"Term::Animation\" from:"
      echo "   \"http:=//search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.6.tar.gz\""
      echo "   by using wget."
      echo "3. Decompress and create the installation subdirectory ~/Term-Animation*"
      echo "4. Install Term::Animation via:"
      echo "                                 perl Makefile.PL"
      echo "                                 make"
      echo "                                 make test"
      echo "                                 make install"
      echo
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your home folder.
      cd ~
      #
      # 2. Download "Term::Animation" from:
      #    http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.6.tar.gz
      # by using wget.
      wget http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.6.tar.gz
      #
      # 3. Decompress and create the installation subdirectory ~/Term-Animation*
      tar -xvzf Term-Animation-2.6.tar.gz
      cd Term-Animation-2.6
      #
      # 4. Install Term::Animation via "perl Makefile.PL", "make", "make test", "make install".
      perl Makefile.PL
      make
      make test
      sudo make install
      echo
      echo "Installation of \"Term::Animation\" is complete."
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
} # End of function f-term-animation_install
#
# +----------------------------------------+
# |     Function f-asciiquarium_install    |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ANS.
# Outputs: None.
#
f_asciiquarium_install () {
      clear  # blank screen
      echo "This script will automatically download and install \"ASCIIQuarium\"."
      echo "The application itself is a single perl script so perl is a prerequisite."
      echo
      echo "This script will do the following:"
      echo "1. Change directory to your home folder."
      echo "2. Download \"asciiquarium\" from \"http://www.robobunny.com\" by using wget."
      echo "3. Decompress and create the installation subdirectory ~/asciiquarium*"
      echo "4. Copy asciiquarium to /usr/local/bin directory."
      echo "5. Allow users to run asciiquarium by setting permissions to r-x or 755 for all users."
      echo "6. Add directory \"/usr/local/bin\" to your PATH command in ~/.bashrc."
      echo
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.
      #
      # 1. Change directory to your home folder.
      cd ~
      #
      # 2. Download "coreutils" from ftp.gnu.org by using wget.
      wget http://www.robobunny.com/projects/asciiquarium/asciiquarium.tar.gz
      #
      # 3. Decompress and create the installation subdirectory ~/asciiquarium
      tar -xvzf asciiquarium.tar.gz
      cd asciiquarium*/
      #
      # 4. Copy asciiquarium to /usr/local/bin directory.
      if [ ! -d "/usr/local/bin" ] ; then
         # Target directory is missing, so create it.
	 sudo mkdir -p /usr/local/bin
      fi
      sudo cp ~/asciiquarium*/asciiquarium /usr/local/bin/
      #
      # 5. Allow users to run asciiquarium by setting permissions to r-x or 755 for all users.
      sudo chmod 755 /usr/local/bin/asciiquarium
      #
      # 6. Add directory /usr/local/bin to your PATH command in ~/.bashrc.
      # Is the directory /usr/local/bin in your PATH of directories?
      # Check the $PATH
      if [[ ! "$PATH" == *":/usr/local/bin"* ]] ; then
         echo "If needed, edit file \"~/.bashrc\" PATH."
         echo "Append the directory name to your environment $PATH."
         echo $(tput bold)'PATH=$PATH'":/usr/local/bin"
         echo "export PATH"
         echo
         echo "       >>> IMPORTANT <<<"
         echo "After editing the file, .bashrc:"
         echo "Close Terminal for changes to take effect."
         echo "Either logout or exit from Terminal and re-launch Terminal."
         echo
      fi
      echo
      echo "Installation of \"ASCIIQuarium\" is complete."
      echo
      echo "To run \"ASCIIQuarium\", select it on the \"Screen-saver Applications Menu\"."
      echo
      echo -n "Press '"Enter"' key to continue."
      read X
      unset X  # Throw out this variable.

} # End of function f-asciiquarium_install
#

