# Â©2013 Copyright 2013 Robert D. Chin
#
# +----------------------------------------+
# |             Revision Date              |
# +----------------------------------------+
# REVDATE="August-14-2013 01:00"
#
# +----------------------------------------+
# |        Function f_menu_cat_system      |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: CHOICE_SCAT, MAX
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_SCAT
#
f_menu_cat_system () {
      f_initvars_menu_app
      until [ $CHOICE_SCAT -eq 0 ]
      do    # Start of System Category until loop.
            #BSY Backup      - File Backup.
            #BSY Disks       - Disk information.
            #BSY Health      - Anti-virus scanners, root-kit detectors, stress tests etc.
            #BSY Logs        - Log file viewers.
            #BSY Mainboard   - Information on PC mainboard, memory, etc.
            #BSY Monitors    - Resources, and disk I/O monitors.
            #BSY Other       - Screen capture, DOS and Nintendo Emulators, etc.
            #BSY Peripherals - Information on PC peripherals, PCI devices, hard drives, etc.
            #BSY Process     - System process monitoring, killing.
            #BSY Screens     - Multiple screen sessions and terminal emulators.
            #BSY Software    - (Un)Install and manage software packages (programs).
            #
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="System Category Menu"
            DELIMITER="#BSY" #BSY This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_SCAT
            #
            f_common_scat_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_SCAT in # Start of System Category case statement.
                 [Bb] | [Bb][Aa]*)
                 f_menu_app_sys_backup        # System Backup Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
                 [Dd] | [Dd][Ii]*)
                 f_menu_app_sys_disks         # System Disks Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
                 [Hh] | [Hh][Ee]*)
                 f_menu_app_sys_health        # System Health Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
                 [Ll] | [Ll][Oo]*)
                 f_menu_app_sys_logs          # System Logs Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
                 [Mm] | [Mm][Aa]*)
                 f_menu_app_sys_mainboard     # System Mainboard Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
                 [Mm] | [Mm][Oo]*)
                 f_menu_app_sys_monitors      # System Monitors Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
                 [Oo] | [Oo][Tt]*)
                 f_menu_app_sys_other         # System Other Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
                 [Pp] | [Pp][Ee]*)
                 f_menu_app_sys_peripherals   # System Peripherals Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
                 [Pp] | [Pp][Rr]*)
                 f_menu_app_sys_process       # System Process Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
                 [Ss] | [Ss][Cc]*)
                 f_menu_app_sys_screens       # System Screens Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
                 [Ss] | [Ss][Oo]*)
                 f_menu_app_sys_software      # System Software Applications Menu.
                 CHOICE_SCAT=-1               # Legitimate response. Stay in menu loop.
                 ;;
            esac                 # End of System Category case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_scat_bad_menu_choice
      done  # End of System Category until loop.
} # End of function f_menu_cat_system
#
# +----------------------------------------+
# |     Function f_menu_app_sys_backup     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_backup () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ] 
      do    # Start of Backup Applications until loop.
            #MSB dtrx - Use tar without remembering which flags for each file to use.
            #MSB rsync - File backup, mirror, directories and files.
            #MSB tar   - File backup, compress files.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="Backup/Archive Applications Menu"
            DELIMITER="#MSB" #MSB This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of Backup Applications case statement.
                 dtrx' '* | 'sudo dtrx' | 'sudo dtrx '*)
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Dd] | [Dd][Tt]*)
                 APP_NAME="dtrx"
                 f_application_run
                 ;;
                 rsync' '* | 'sudo rsync' | 'sudo rsync '*)
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Rr] | [Rr][Ss]*)
                 APP_NAME="rsync"
                 f_application_run
                 ;;
                 tar' '* | 'sudo tar' | 'sudo tar '*)
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Tt] | [Tt][Aa]*)
                 APP_NAME="tar"
                 f_application_run
                 ;;
            esac                # End of Backup Applications case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of Backup Applications until loop.
} # End of function f_menu_app_sys_backup
#
# +----------------------------------------+
# |      Function f_menu_app_sys_disks     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_disks () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ] 
      do    # Start of System Disks Information Applications until loop.
            #MSD blkid  - Block devices.
            #MSD cfdisk - Disk partition tool.
            #MSD df     - Disk usage and mount points, usage: -hT.
            #MSD dfc    - Disk usage and mount points, graphical display.
            #MSD du     - Disk usage monitor by directory.
            #MSD gt5    - A diff-capable du-browser.
            #MSD hdparm - Show/set disk parameters, settings. 
            #MSD lsblk  - List block devices (disks).
            #MSD ncdu   - Disk usage monitor, ncurses-based.
            #MSD parted - Disk partition tool.
            #MSD pydf   - Disk usage df clone written in python.
            #MSD uuid   - Use ls -l to show disk uuid number.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="System Disks Information Menu"
            DELIMITER="#MSD" #MSD This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of System Disks Information Applications case statement.
                 blkid' '* | 'sudo blkid '* | 'sudo blkid')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Bb] | [Bb][Ll]*)
                 APP_NAME="blkid"
                 f_application_run
                 ;;
                 cfdisk' '* | 'sudo cfdisk '* | 'sudo cfdisk')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Cc] | [Cc][Ff]*)
                 APP_NAME="cfdisk"
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 df' '* | 'sudo df '* | 'sudo df')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Dd] | [Dd][Ff])
                 APP_NAME="df -hT"
                 clear # Blank the screen.
                 echo "df - Displays free space on disk"
                 echo
                 echo "Usage:"
                 echo "df [OPTION]... [FILE]..."
                 echo "df [OPTION]... --files0-from=F"
                 echo "   -h, --human-readable    format (e.g., 1K 234M 2G)"
                 echo "   --total                 produce a grand total"
                 echo "   -t, --type=TYPE         limit listing to specific file systems"
                 echo "   -T, --print-type        print file system type"
                 echo "   -x, --exclude-type=TYPE limit listing to file systems not of type TYPE"
                 echo
                 echo "*** For more help type: 'man df'"
                 echo "                        'df --help'"
                 echo
                 echo "Display total disk usage in human-readable format."
                 echo
                 echo "Now run du. Usage: df -hT"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 dfc' '* | 'sudo dfc '* | 'sudo dfc')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Dd] | [Dd][Ff]| [Dd][Ff][Cc])
                 APP_NAME="dfc"
                 f_application_run
                 ;;
                 du' '* | 'sudo du '* | 'sudo du')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Dd] | [Dd][Uu])
                 APP_NAME="du -hsc"
                 clear # Blank the screen.
                 echo "du - Displays disk usage per directory"
                 echo
                 echo "Usage:"
                 echo "du [OPTION]... [FILE]..."
                 echo "du [OPTION]... --files0-from=F"
                 echo "   -h, --human-readable  human-readable format (e.g., 1K 234M 2G)"
                 echo "   -c, --total           produce a grand total"
                 echo "   -S, --separate-dirs   do not include sub-folders"
                 echo "   -s, --summarize       display only a total"
                 echo "   --exclude=PATTERN     exclude files matching PATTERN"
                 echo "   -d, --max-depth=N     N  or  fewer  levels  below"
                 echo
                 echo "*** For more help type: 'man du'"
                 echo "                        'du --help'"
                 echo
                 echo "Display total disk usage in human-readable format."
                 echo
                 echo "Now run du. Usage: du -hc"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 gt5' '* | 'sudo gt5 '* | 'sudo gt5')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Gg] | [Gg][Tt]*)
                 APP_NAME="gt5"
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 hdparm' '* | 'sudo hdparm '* | 'sudo hdparm')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Hh] | [Hh][Dd]*)
                 APP_NAME="hdparm"
                 f_application_run
                 ;;
                 lsblk' '* | 'sudo lsblk '* | 'sudo lsblk')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Ss]*)
                 APP_NAME="lsblk"
                 f_application_run
                 ;;
                 ncdu' '* | 'sudo ncdu '* | 'sudo ncdu')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Nn] | [Nn][Cc]*)
                 APP_NAME="ncdu"
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 parted' '* | 'sudo parted '* | 'sudo parted')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Pp] | [Pp][Aa]*)
                 APP_NAME="parted"
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 pydf' '* | 'sudo pydf '* | 'sudo pydf')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Yy]*)
                 APP_NAME="pydf -hT"
                 clear # Blank the screen.
                 echo "pydf - Displays free space on disk"
                 echo
                 echo "Usage:"
                 echo "pydf [OPTION]... [FILE]..."
                 echo "   -h, --human-readable    format (e.g., 1K 234M 2G)"
                 echo "   -k, --kilobytes"
                 echo "   -m, --megabytes"
                 echo "   -g, --gigabytes"
                 echo
                 echo "*** For more help type: 'man df'"
                 echo "                        'df --help'"
                 echo
                 echo "Display total disk usage in human-readable format."
                 echo
                 echo "Now run df. Usage: df -hT"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 uuid' '* | 'sudo uuid '* | 'sudo uuid')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Uu] | [Uu][Uu]*)
                 clear # Blank the screen.
                 echo "To find the UUID of a disk, type: ls -l /dev/disk/by-uuid."
                 APP_NAME="ls -l /dev/disk/by-uuid"
                 f_application_run             
                 ;;
            esac                # End of System Disks Information> Applications case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of System Disks Information Applications until loop.
} # End of function f_menu_app_sys_disks
#
# +----------------------------------------+
# |     Function f_menu_app_sys_health     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_health () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ] 
      do    # Start of System Health Applications until loop.
            #MSH arp-scan   - Discover, fingerprint hosts on LAN using MAC addresses.
            #MSH arpalert   - Checks MAC addresses against list of known MACs, runs script.
            #MSH arpon      - ArpON detects/blocks arp poisoning/spoofing attacks.
            #MSH arpwatch   - Detects unknown MAC addresses and IP addresses, like ArpON.
            #MSH chkrootkit - Root Kit detector.
            #MSH clamscan   - Clam anti-virus program scans for viruses.
            #MSH freshclam  - Clam anti-virus database definition update.
            #MSH lynis      - security auditing tool that tests for security holes in a PC.
            #MSH rkhunter   - Root Kit detector.
            #MSH tripwire   - Detects/Reports changes in system files.
            #MSH stress     - Stress test can simulate a heavy load on CPU.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="System Health Applications Menu"
            DELIMITER="#MSH" #MSH This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of System Health Applications case statement.
                 arp-scan' '* | 'sudo arp-scan '* | 'sudo arp-scan')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Aa] | [Aa][Rr] | [Aa][Rr][Pp] | [Aa][Rr][Pp][-]*)
                 clear # Blank the screen.
                 echo "arp-scan - ARP Scanner."
                 echo
                 echo "Usage:"
                 echo "arp-scan [OPTIONS] [HOSTS]..."
                 echo
                 echo "       --localnet or -l"
                 echo "              Generate addresses from network  interface  configuration.   Use"
                 echo "              the  network  interface  IP address and network mask to generate"
                 echo "              the list of target host addresses.  The list  will  include  the"
                 echo "              network  and  broadcast  addresses,  so  an interface address of"
                 echo "              10.0.0.1 with netmask 255.255.255.0 would  generate  256  target"
                 echo "              hosts  from  10.0.0.0  to 10.0.0.255 inclusive."
                 echo
                 echo "       --interface=<s> or -I <s>"
                 echo "              Use  network  interface  <s>."
                 echo
                 echo "Now run arp-scan on this PC as an example."
                 echo "Usage: arp-scan -l -I <interface>"
                 echo
                 f_press_enter_key_to_continue
                 f_find_NIC
                 APP_NAME="arp-scan -l -I $ANS"
                 f_application_run
                 ;;
                 arpalert' '* | 'sudo arpalert '* | 'sudo arpalert')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Aa] | [Aa][Rr] | [Aa][Rr][Pp] | [Aa][Rr][Pp][Aa]*)
                 APP_NAME="arpalert"
                 f_application_run
                 ;;
                 arpon' '* | 'sudo arpon '* | 'sudo arpon')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Aa] | [Aa][Rr] | [Aa][Rr][Pp] | [Aa][Rr][Pp][Oo]*)
                 APP_NAME="arpon"
                 f_application_run
                 ;;
                 arpwatch' '* | 'sudo arpwatch '* | 'sudo arpwatch')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Aa] | [Aa][Rr] | [Aa][Rr][Pp] | [Aa][Rr][Pp][Ww]*)
                 APP_NAME="arpwatch"
                 clear # Blank the screen.
                 echo "arpwatch - Keep track of ethernet/ip address pairings"
                 echo
                 echo "Arpwatch  keeps  track  for  ethernet/ip  address  pairings. It syslogs"
                 echo "activity and reports certain changes via email.  Arpwatch uses  pcap(3)"
                 echo "to listen for arp packets on a local ethernet interface."
                 echo
                 echo "Usage:"
                 echo "arpwatch [-dN] [-f datafile] [-i interface] [-n net[/width]] [-r file]"
                 echo "         [-s sendmail_path] [-p] [-a] [-m addr] [-u username]"
                 echo "         [-R seconds ] [-Q] [-z ignorenet/ignoremask]"
                 echo
                 echo "Now run man arpwatch. Usage: man arpwatch"
                 echo
                 f_press_enter_key_to_continue
                 APP_NAME="man arpwatch"
                 f_application_run
                 ;;
                 chkrootkit' '* | 'sudo chkrootkit '* | 'sudo chkrootkit')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Cc] | [Cc][Hh]*)
                 APP_NAME="chkrootkit"
                 f_application_run
                 ;;
                 clamscan' '* | 'sudo clamscan '* | 'sudo clamscan')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 PRESS_KEY=1 # Display "Press 'Enter' key to continue."
                 ;;
                 [Cc] | [Cc][Ll]*)
                 APP_NAME="clamscan -r /home"
                 clear # Blank the screen.
                 echo "clamscan -  Anti-virus scanner"
                 echo
                 echo "Usage:" 
                 echo "clamscan [OPTIONS] [FILE/DIRECTORY/-]"
                 echo "         -r, --recursive will recursively scan your home directory."
                 echo
                 echo "*** For more help type: 'man clamscan'"
                 echo "                        'clamscan --help'"
                 echo
                 echo "Clam anti-virus will now scan the folder, please be patient"
                 echo "since Clam anti-virus is slow to scan, but thorough."
                 f_press_enter_key_to_continue
                 f_application_run
                 PRESS_KEY=1 # Display "Press 'Enter' key to continue."
                 ;;
                 freshclam' '* | 'sudo freshclam '* | 'sudo freshclam')
                 APP_NAME=$CHOICE_APP
                 # f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=1 # Display "Press 'Enter' key to continue."
                 ;;
                 [Ff] | [Ff][Rr]*)
                 APP_NAME="freshclam"
                 f_application_run
                 PRESS_KEY=1 # Display "Press 'Enter' key to continue."
                 ;;
                 lynis' '* | 'sudo lynis '* | 'sudo lynis')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Yy]*)
                 APP_NAME="lynis"
                 f_application_run
                 ;;
                 rkhunter' '* | 'sudo rkhunter '* | 'sudo rkhunter')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Rr] | [Rr][Kk]*)
                 APP_NAME="rkhunter"
                 f_application_run
                 ;;
                 stress' '* | 'sudo stress '* | 'sudo stress')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ss] | [Ss][Tt]*)
                 APP_NAME="stress"
                 clear # Blank the screen.
                 echo "stress - A tool to impose load on and stress test a computer system"
                 echo
                 echo "The application, 'stress' is a tool that imposes a configurable amount of CPU,"
                 echo "memory, I/O, or disk stress on a POSIX-compliant operating system and reports"
                 echo "any errors it detects."
                 echo
                 echo "The application 'stress' is not a benchmark."
                 echo
                 echo "It is a tool used by:"
                 echo "System Administrators to evaluate how well their systems will scale,"
                 echo "Kernel Programmers to evaluate perceived performance characteristics, and by"
                 echo "Systems Programmers to expose the classes of bugs which only or more frequently"
                 echo "manifest themselves when the system is under heavy load."
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 tripwire' '* | 'sudo tripwire '* | 'sudo tripwire')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Tt] | [Tt][Rr]*)
                 APP_NAME="man tripwire"
                 clear # Blank the screen.
                 echo "tripwire - Detects unauthorized file changes"
                 echo
                 echo "*** For more help type: 'man tripwire' for use and operation."
                 echo "*** For more help type: 'man twadmin' - create, encode policy, config files."
                 echo "*** For more help type: 'man twprint' - print database."
                 echo "*** For more help type: 'man siggen' - display hash values for files."
                 echo "*** For more help type: 'man twconfig' - explanation of config files."
                 echo "*** For more help type: 'man twpolicy' - explanation of policy files."
                 echo "*** For more help type: 'man twfiles' - overview of files, settings."
                 echo
                 echo "Usage:"
                 echo "Database Initialization:  tripwire [-m i|--init] [OPTIONS]"
                 echo "Integrity Checking:  tripwire [-m c|--check] [object1 [object2...]]"
                 echo "Database Update:  tripwire [-m u|--update]"
                 echo "Policy Update:  tripwire [-m p|--update-policy] policyfile.txt"
                 echo "Test:  tripwire [-m t|--test] --email address"
                 echo "Type 'tripwire [mode] --help' OR"
                 echo "'tripwire --help mode [mode...]' OR"
                 echo "'tripwire --help all' for extended help"
                 echo
                 echo "Now run man tripwire. Usage: man tripwire"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
            esac                # End of System Health Applications case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of System Health Applications until loop.
} # End of function f_menu_app_sys_health
#
# +----------------------------------------+
# |      Function f_menu_app_sys_logs      |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_logs () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ]
      do    # Start of System Logs until loop.
            #MLO ccze      - A robust and modular log coloriser, with plugins. 
            #MLO multitail - View multiple log files using multiple panes.
            #MLO swatch    - Log file viewer with regexp matching, highlighting & hooks.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="System Logs Menu"
            DELIMITER="#MLO" #MLO This 3rd field prevents awk from printing this line into menu options.
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of System Logs case statement.
                 ccze' '* | 'sudo ccze '* | 'sudo ccze')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Cc] | [Cc][Cc]*)
                 APP_NAME="ccze"
                 f_application_run
                 ;;
                 multitail' '* | 'sudo multitail '* | 'sudo multitail')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Mm] | [Mm][Uu]*)
                 APP_NAME="multitail"
                 f_application_run
                 ;;
                 swatch' '* | 'sudo swatch '* | 'sudo swatch')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ss] | [Ss][Ww]*)
                 APP_NAME="swatch"
                 f_application_run
                 ;;
            esac                # End of System Logs case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of System Logs until loop.
} # End of f_menu_app_sys_logs
#
# +----------------------------------------+
# |   Function f_menu_app_sys_mainboard    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_mainboard () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ]
      do    # Start of System Information until loop.
            #MSI dmidecode   - Main board information.
            #MSI free        - Memory usage RAM and swap.
            #MSI hdparm      - Hard disk drive information.
            #MSI lsb_release - Linux distro and LSB (Linux Standard Base).
            #MSI lscpu       - CPU information.
            #MSI lshw        - Main board information.
            #MSI lsmod       - Linux kernel module information.
            #MSI slabtop     - Kernel slab cache information in real time.
            #MSI uname       - Linux kernel information.
            #MSI vmstat      - Memory usage RAM and swap, CPU information.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="Mainboard Information Menu"
            DELIMITER="#MSI" #MSI This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of Mainboard System Information case statement.
                 dmidecode' '* | 'sudo dmidecode '* | 'sudo dmidecode')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Dd] | [Dd][Mm]*)
                 APP_NAME="dmidecode"
                 f_application_run
                 ;;
                 free' '* | 'sudo free '* | 'sudo free')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ff] | [Ff][Rr]*)
                 APP_NAME="free -m -t -s 2 -c 5"
                 clear # Blank the screen.
                 echo "free - Display the amount of free and used memory both RAM and swap"
                 echo
                 echo "Usage:"
                 echo "free [-b|-k|-m|-g] [-c count] [-l] [-o] [-t] [-s delay] [-V]"
                 echo
                 echo "*** For more help type: 'man free'"
                 echo "                        'free --help'"

                 echo
                 echo "Display in MB Megabytes with column totals, for 5 times every 2 seconds."
                 echo
                 echo "Now run free. Usage: free -m -t -s 2 -c 5"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 hdparm' '* | 'sudo hdparm '* | 'sudo hdparm')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Hh] | [Hh][Dd]*)
                 APP_NAME="hdparm -I /dev/sda"
                 clear # Blank the screen.
                 echo "hdparm - Get SATA/IDE hard disk drive parameters."
                 echo
                 echo "Usage:"
                 echo "hdparm [OPTIONS..] [DEVICE ...]"
                 echo
                 echo "*** For more help type: 'man hdparm'"
                 echo "                        'hdparm --help'"
                 echo
                 echo "Find information about the first hard disk drive: /dev/sda on this PC (localhost)."
                 echo
                 echo "Now run hdparm. Usage: 'hdparm -I /dev/sda'"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 lsb_release' '* | 'sudo lsb_release '* | 'sudo lsb_release')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Ss] | [Ll][Ss][Bb]*)
                 APP_NAME="lsb_release -a"
                 f_application_run
                 ;;
                 lscpu' '* | 'sudo lscpu '* | 'sudo lscpu')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Ss] | [Ll][Ss][Cc]*)
                 APP_NAME="lscpu"
                 f_application_run
                 ;;
                 lshw' '* | 'sudo lshw '* | 'sudo lshw')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Ss] | [Ll][Ss][Hh]*)
                 APP_NAME="lshw -short"
                 clear # Blank the screen.
                 echo "lshw - Displays main board information"
                 echo
                 echo "Usage:"
                 echo "lshw [ -version ]"
                 echo "lshw [ -help ]"
                 echo "lshw [ -X ]"
                 echo "lshw  [ -html ] [ -short ] [ -xml ] [ -json ] [ -businfo ] [ -dump filename ]"
                 echo "[ -class class... ] [ -disable test... ] [ -enable test... ] [ -sanitize ]"
                 echo "[ -numeric ] [ -quiet ]"
                 echo
                 echo "*** For more help type: 'man lshw'"
                 echo "                        'lshw --help'"
                 echo
                 echo "Display short report."
                 echo
                 echo "Now run lshw. Usage: lshw -short"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 lsmod' '* | 'sudo lsmod '* | 'sudo lsmod')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Ss] | [Ll][Ss][Mm]*)
                 APP_NAME="lsmod "
                 f_application_run
                 ;;
                 slabtop' '* | 'sudo slabtop '* | 'sudo slabtop')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "Q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Ss] | [Ss][Ll]*)
                 APP_NAME="slabtop"
                 clear # Blank the screen.
                 echo "slabtop - Display kernel slab cache information in real time."
                 echo
                 echo "slabtop displays a listing of the top caches sorted by  one  of  the  listed"
                 echo "sort  criteria.   It also displays a statistics header filled with slab"
                 echo "layer information."
                 echo
                 echo "Usage:"
                 echo "slabtop [OPTIONS]"
                 echo
                 echo "slabtop  displays  detailed kernel slab cache information in real time."
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 echo
                 echo "If you get error message: 'fopen /proc/slabinfo: Permission denied'"
                 echo "Then try running with sudo command i.e. 'sudo slabtop'."
                 echo
                 f_press_enter_key_to_continue
                 f_how_to_quit_application "Q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 uname' '* | 'sudo uname '* | 'sudo uname')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Uu] | [Uu][Nn]*)
                 APP_NAME="uname -a"
                 f_application_run
                 ;;
                 vmstat' '* | 'sudo vmstat '* | 'sudo vmstat')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Vv] | [Vv][Mm]*)
                 APP_NAME="vmstat"
                 f_application_run
                 ;;
            esac                # End of Mainboard System Information case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of Mainboard System Information until loop.
} # End of f_menu_app_sys_mainboard
#
# +----------------------------------------+
# |    Function f_menu_app_sys_monitors    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_monitors () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ]
      do    # Start of System Monitors until loop.
            #MSM cacti     - Frontend to rrdtool for monitoring systems and services.
            #MSM chkconfig - System update/query run-level processes at boot time.
            #MSM dstat     - View system resources, replaces vmstat, iostat, ifstat.
            #MSM glances   - View system processes/resources, CPU/Load/Mem/Swap/Disk/BW.
            #MSM iostat    - CPU usage and disk I/O process monitor.
            #MSM iotop     - Disk I/O process monitor.
            #MSM last      - Users' login/logout times from /var/log/wtmp.
            #MSM mpstat    - CPU microprocessor usage monitor.
            #MSM nmon      - CPU usage, memory, network, disk usage, processes, resources.
            #MSM rrdtool   - The Round Robin Database Tool stores/displays time-series data.
            #MSM saidar    - Monitor system processes, network I/O, disks I/O, free space.
            #MSM sar       - CPU usage statistics, user/nice/system/iowait/steal/idle.
            #MSM swatch    - Log file viewer with regexp matching, highlighting & hooks.
            #MSM tload     - System load average graphical monitor.
            #MSM yacpi     - ACPI monitor, ncurses-based.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="System Monitors Menu"
            DELIMITER="#MSM" #MSM This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of System Monitors case statement.
                 cacti' '* | 'sudo cacti '* | 'sudo cacti')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Cc] | [Cc][Aa]*)
                 APP_NAME="cacti"
                 clear # Blank the screen.
                 echo "cacti - Frontend to rrdtool for monitoring systems and services."
                 echo
                 echo "Cacti is a complete frontend to rrdtool, it stores all of the necessary"
                 echo "information to create graphs and populates them with data in a MySQL"
                 echo "database.  The frontend is completely PHP driven.  Along with being able"
                 echo "to maintain Graphs, Data Sources, and Round Robin Archives in a"
                 echo "database, cacti handles the data gathering also.  There is also SNMP"
                 echo "support for those used to creating traffic graphs with MRTG."
                 echo
                 echo "This package requires a functional MySQL database server on either the"
                 echo "installation host or remotely accessible system.  If you do not already"
                 echo "have a database server available, you should also install mysql-server."
                 echo
                 echo "Homepage: http://www.cacti.net/"
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 chkconfig' '* | 'sudo chkconfig '* | 'sudo chkconfig')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Cc] | [Cc][Hh]*)
                 APP_NAME="chkconfig -l"
                 clear # Blank the screen.
                 echo "chkconfig - Manipulate run-level services at boot time."
                 echo
                 echo "Usage:"
                 echo "chkconfig -t|--terse [names]"
                 echo "chkconfig -s|--set [name state]"
                 echo "chkconfig -e|--edit [names]"
                 echo "chkconfig -c|--check name [state]"
                 echo "chkconfig -l|--list [--deps] [names]"
                 echo "chkconfig -A|--allservices"
                 echo "chkconfig -a|--add [names]"
                 echo "chkconfig -d|--del [names]"
                 echo
                 echo "*** For more help type: 'man chkconfig'"
                 echo "                        'chkconfig --help'"
                 echo
                 echo "Now run chkconfig. Usage: chkconfig -l"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 dstat' '* | 'sudo dstat '* | 'sudo dstat')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Dd] | [Dd][Ss]*)
                 APP_NAME="dstat 1 10"
                 clear # Blank the screen.
                 echo "dstat - Display system resource statistics."
                 echo
                 echo "Usage:"
                 echo "dstat [-afv] [OPTIONS..] [DELAY [COUNT]]"
                 echo
                 echo "*** For more help type: 'man dstat'"
                 echo "                        'dstat --help'"
                 echo
                 echo "dstat this PC (localhost) for 10 times as an example."
                 echo
                 echo "Now run dstat. Usage: dstat 1 10"
                 f_press_enter_key_to_continue
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 glances' '* | 'sudo glances '* | 'sudo glances')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Gg] | [Gg][Ll]*)
                 APP_NAME="glances"
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 iotop' '* | 'sudo iotop '* | 'sudo iotop')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Ii]| [Ii][Oo] | [Ii][Oo][Tt]*)
                 APP_NAME="iotop"
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 iostat' '* | 'sudo iostat '* | 'sudo iostat')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ii]| [Ii][Oo] | [Ii][Oo][Ss]*)
                 APP_NAME="iostat"
                 f_application_run
                 ;;
                 last' '* | 'sudo last '* | 'sudo last')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll]| [Ll][Aa]*)
                 APP_NAME="last"
                 f_application_run
                 ;;
                 mpstat' '* | 'sudo mpstat '* | 'sudo mpstat')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Mm] | [Mm][Pp]*)
                 APP_NAME="mpstat 2 5"
                 clear # Blank the screen.
                 echo "mpstat - Display CPU statistics."
                 echo
                 echo "Usage:"
                 echo "mpstat [ -A ] [ -I { SUM | CPU | SCPU | ALL } ] [ -u ]"
                 echo "[ -P { cpu [,...] | ON | ALL } ] [ -V ] [ interval [ count ] ]"
                 echo
                 echo "*** For more help type: 'man mpstat'"
                 echo "                        'mpstat --help'"
                 echo
                 echo "mpstat this PC's CPU (localhost) for 5 times every 2 seconds as an example."
                 echo
                 echo "Now run mpstat. Usage: dstat 2 5"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 nmon' '-h* | 'sudo nmon '-h*)
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 PRESS_KEY=1 # Display "Press 'Enter' key to continue."
                 ;;
                 nmon' '* | 'sudo nmon '* | 'sudo nmon')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Nn] | [Nn][Mm]*)
                 APP_NAME="nmon"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 rrdtool' '* | 'sudo rrdtool '* | 'sudo rrdtool')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Rr] | [Rr][Rr]*)
                 APP_NAME="rrdtool"
                 clear # Blank the screen.
                 echo "rrdtool   - The Round Robin Database Tool stores/displays time-series data."
                 echo
                 echo "The Round Robin Database Tool (RRDtool) is a system to store and display"
                 echo "time-series data (e.g. network bandwidth, machine-room temperature,"
                 echo "server load average). It stores the data in Round Robin Databases (RRDs),"
                 echo "a very compact way that will not expand over time. RRDtool processes the"
                 echo "extracted data to enforce a certain data density, allowing for useful"
                 echo "graphical representation of data values."
                 echo
                 echo "RRDtool is often used via various wrappers that can poll data from devices"
                 echo "and feed data into RRDs, as well as provide a friendlier user interface and"
                 echo "customized graphs."
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 saidar' '* | 'sudo saidar '* | 'sudo saidar')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Ss] | [Ss][Aa] | [Ss][Aa][Ii]*)
                 APP_NAME="saidar"
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 sar' '* | 'sudo sar '* | 'sudo sar')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ss] | [Ss][Aa] | [Ss][Aa][Rr])
                 APP_NAME="sar"
                 f_application_run
                 ;;
                 swatch' '* | 'sudo swatch '* | 'sudo swatch')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ss] | [Ss][Ww]*)
                 APP_NAME="swatch"
                 f_application_run
                 ;;
                 tload' '* | 'sudo tload '* | 'sudo tload')
                 APP_NAME=$CHOICE_APP
                 clear # Blank the screen.
                 echo tload - System load average graphical monitor.
                 echo
                 echo "To quit $APP_NAME, type Ctrl-Z or Ctrl-C."
                 echo "(There is no way to cleanly return to the menu)."
                 echo "Running $APP_NAME will exit this menu script."
                 echo
                 echo -n "Run $APP_NAME and exit script? (y/N)? "
                 read ANS
                 case $ANS in
                      [Yy] | [Yy][Ee] | [Yy][Ee][Ss])
                      f_application_run
                      ;;
                      [Nn] | [Nn][Oo] | *)
                      PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                      ;;
                 esac
                 ;;
                 [Tt] | [Tt][Ll]*)
                 APP_NAME="tload"
                 clear # Blank the screen.
                 echo tload - System load average graphical monitor.
                 echo
                 echo "To quit $APP_NAME, type Ctrl-Z or Ctrl-C."
                 echo "(There is no way to cleanly return to the menu)."
                 echo "Running $APP_NAME will exit this menu script."
                 echo
                 echo -n "Run $APP_NAME and exit script? (y/N)? "
                 read ANS
                 case $ANS in
                      [Yy] | [Yy][Ee] | [Yy][Ee][Ss])
                      f_application_run
                      ;;
                      [Nn] | [Nn][Oo] | *)
                      PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                      ;;
                 esac
                 ;;
                 yacpi' '* | 'sudo yacpi '* | 'sudo yacpi')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Yy] | [Yy][Aa]*)
                 APP_NAME="yacpi"
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
            esac                # End of System Monitors case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of System Monitors until loop.
} # End of f_menu_app_sys_monitors
#
# +----------------------------------------+
# |     Function f_menu_app_sys_other      |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_other () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ]
      do    # Start of System Other until loop.
            #MSO desmume - Nintendo DS emulator.
            #MSO dosemu  - DOS emulator.
            #MSO scrot   - Screen capture.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="Other System Applications Menu"
            DELIMITER="#MSO" #MSO This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of Other System Applications case statement.
                 desmume' '*)
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Dd] | [Dd][Ee]*)
                 APP_NAME="desmume"
                 f_application_run
                 ;;
                 dosemu' '*)
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Dd] | [Dd][Oo]*)
                 APP_NAME="dosemu"
                 f_application_run
                 ;;
                 scrot' '*)
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ss] | [Ss][Cc]*)
                 APP_NAME="scrot"
                 f_application_run
                 ;;
            esac                # End of Other System Applications case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of Other System Applications until loop.
} # End of f_menu_app_sys_other
#
# +----------------------------------------+
# |   Function f_menu_app_sys_peripherals  |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_peripherals () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ]
      do    # Start of Peripheral System Information until loop.
            #MSL acpitool  - ACPI power/battery settings.
            #MSL blkid     - Block devices information.
            #MSL lsblk     - List block devices (disks).
            #MSL lsof      - Display information about open files.
            #MSL lspci     - PCI buses and connected devices.
            #MSL lspcmcia  - PCMCIA extended debugging information.
            #MSL lsusb     - USB devices.
            #MSL pccardctl - PCMCIA card devices.
            #MSL printenv  - Environmental variables.
            #MSL uptime    - Display how long PC has been running, # users, load average.
            #MSL w         - A combination of uptime and who commands.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="Peripheral System Information Menu"
            DELIMITER="#MSL" #MSL This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of Peripheral System Information case statement.
                 acpitool' '* | 'sudo acpitool '* | 'sudo acpitool')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Aa] | [Aa][Cc]*)
                 APP_NAME="acpitool"
                 f_application_run
                 ;;
                 blkid' '* | 'sudo blkid '* | 'sudo blkid')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Bb] | [Bb][Ll]*)
                 APP_NAME="blkid"
                 clear # Blank the screen.
                 echo "blkid - Locate/print block device attributes"
                 echo
                 echo "The blkid program is the command-line interface to working with the libblkid(3)"
                 echo "library.  It can determine the type of content (e.g. filesystem or swap) that a"
                 echo "block device holds, and also attributes (tokens, NAME=value pairs) from the"
                 echo "content metadata (e.g. LABEL or UUID fields)."
                 echo
                 echo "blkid has two main forms of operation: either searching for a device with a"
                 echo "specific NAME=value pair, or displaying NAME=value pairs  for  one  or more"
                 echo "specified devices."
                 echo
                 echo "Usage:"
                 echo "blkid -L label | -U uuid"
                 echo "blkid [-dghlv] [-c file] [-w file] [-o format] [-s tag] [-t NAME=value][device]"
                 echo "blkid -p [-O offset] [-S size] [-o format] [-s tag] [-n list] [-u list] device"
                 echo "blkid -i [-o format] [-s tag] device ..."
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 lsblk' '* | 'sudo lsblk '* | 'sudo lsblk')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Ss] | [Ll][Ss][Bb]*)
                 APP_NAME="lsblk"
                 f_application_run
                 ;;
                 lsof' '* | 'sudo lsof '* | 'sudo lsof')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Ss] | [Ll][Ss][Oo]*)
                 APP_NAME="lsof"
                 f_application_run
                 ;;
                 lspci' '* | 'sudo lspci '* | 'sudo lspci')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Ss] | [Ll][Ss][Pp] | [Ll][Ss][Pp][Cc] | [Ll][Ss][Pp][Cc][Ii])
                 APP_NAME="lspci"
                 f_application_run
                 ;;
                 lspcmcia' '* | 'sudo lspcmcia '* | 'sudo lspcmcia')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Ss] | [Ll][Ss][Pp] | [Ll][Ss][Pp][Cc] | [Ll][Ss][Pp][Cc][Mm]*)
                 APP_NAME="lspcmcia"
                 clear # Blank the screen.
                 echo "lspcmcia - Display extended PCMCIA debugging information."
                 echo
                 echo "lspcmcia is an alias for pccardctl ls, provided for convenience."
                 echo
                 echo "Usage:"
                 echo "lspcmcia [-V] [-v ...] [socket]"
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 lsusb' '* | 'sudo lsusb '* | 'sudo lsusb')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ll] | [Ll][Ss] | [Ll][Ss][Uu]*)
                 APP_NAME="lsusb"
                 f_application_run
                 ;;
                 pccardctl' '* | 'sudo pccardctl '* | 'sudo pccardctl')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Cc]*)
                 APP_NAME="pccardctl"
                 clear # Blank the screen.
                 echo "pccardctl - PCMCIA card control utility."
                 echo
                 echo "pccardctl  is  used  to monitor and control the state of PCMCIA sockets."
                 echo "If a socket number is specified, the command will be applied to just one"
                 echo "socket; otherwise, all sockets will be affected."
                 echo
                 echo "If pccardctl is executed by root, all commands are available."
                 echo "If it is executed by an unpriviledged user, only the informational commands"
                 echo "are accessible."
                 echo
                 echo "Usage:"
                 echo "pccardctl [-V] [-v ...] command [socket]"
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "            a combination of uptime and who commands.            '$APP_NAME --help'"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 printenv' '* | 'sudo printenv '* | 'sudo printenv')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Rr]*)
                 APP_NAME="printenv"
                 f_application_run
                 ;;
                 uptime' '* | 'sudo uptime '* | 'sudo uptime')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Uu] | [Uu][Pp]*)
                 APP_NAME="uptime"
                 f_application_run
                 ;;
                 w' '* | 'sudo w '* | 'sudo w')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ww])
                 APP_NAME="w"
                 f_application_run
                 ;;
            esac                # End of Peripheral System Information case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of Peripheral System Information until loop.
} # End of f_menu_app_sys_peripherals
#
# +----------------------------------------+
# |     Function f_menu_app_sys_process    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_process () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ] 
      do    # Start of System Process Applications until loop.
            #MSR atop      - View system processes/resources, CPU/Mem/Swap/Page/Disk/Net.
            #MSR htop      - View system processes/resources; bar graph of CPU/Mem/Swap.
            #MSR killall   - Kill processes based on full-name of process.
            #MSR pgrep     - Search ps output for full/partial name of process.
            #MSR pidstat   - View system processes/resources, PID/USR/System/Guest/CPU/Cmd.
            #MSR pkill     - Kill processes based on partial name of process.
            #MSR pmap      - View process memory usage.
            #MSR ps        - View system processes/resources, PID/PGID/SID/TTY/Time/Cmd.
            #MSR pstree    - Tree view system processes/resources, like "ps" command.
            #MSR pswatcher - Execute commands when certain processes are run.
            #MSR pwdx      - Report current working directory of a process.
            #MSR strace    - Trace process system calls and signals.
            #MSR sysctl    - Configure kernel parameters at runtime.
            #MSR top       - View system PID/User/PR/NI/VERT/RES/SHR/CPU/MEM/Time/Cmd.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="System Process Applications Menu"
            DELIMITER="#MSR" #MSR This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of System Process Applications case statement.
                 atop' '* | 'sudo atop '* | 'sudo atop')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Aa] | [Aa][Tt]*)
                 APP_NAME="atop"
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 htop' '* | 'sudo htop '* | 'sudo htop')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q or <F10>"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Hh] | [Hh][Tt]*)
                 APP_NAME="htop"
                 f_how_to_quit_application "q or <F10>"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 killall' '* | 'sudo killall '* | 'sudo killall')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Kk] | [Kk][Ii]*)
                 APP_NAME="killall"
                 f_application_run
                 ;;
                 pgrep' '* | 'sudo pgrep '* | 'sudo pgrep')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Gg]*)
                 APP_NAME="pgrep"
                 f_application_run
                 ;;
                 pidstat' '* | 'sudo pidstat '* | 'sudo pidstat')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Ii]*)
                 APP_NAME="pidstat 2 3"
                 clear # Blank the screen.
                 echo "pidstat - View system processes/resources, PID/USR/System/Guest/CPU/Cmd."
                 echo
                 echo "pidstat this PC's CPU (localhost) for 3 times every 2 seconds as an example."
                 echo
                 echo "*** For more help type: 'man pidstat'"
                 echo "                        'pidstat --help'"
                 echo
                 echo "Now run pidstat. Usage: pidstat 2 3"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 pkill' '* | 'sudo pkill '* | 'sudo pkill')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Kk]*)
                 APP_NAME="pkill"
                 f_application_run
                 ;;
                 pmap' '* | 'sudo pmap '* | 'sudo pmap')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Mm]*)
                 APP_NAME="pmap"
                 f_application_run
                 ;;
                 ps' '* | 'sudo ps '* | 'sudo ps')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Ss])
                 APP_NAME="ps -ejH"
                 clear # Blank the screen.
                 echo "ps - View system processes/resources, PID/PGID/SID/TTY/Time/Cmd."
                 echo
                 echo "Usage:"
                 echo "To see every process on the system using standard syntax:"
                 echo "[ps -e ] [ ps -ef ] [ ps -eF ] [ ps -ely ]"
                 echo
                 echo "To see every process on the system using BSD syntax:"
                 echo "[ ps ax] [ ps axu ]"
                 echo
                 echo "To print a process tree:"
                 echo "[ ps -ejH ] [ ps axjf ]"
                 echo
                 echo "To get info about threads:"
                 echo "[ ps -eLf ] [ ps axms ]"
                 echo
                 echo "To see every process running as root (real & effective ID) in user format:"
                 echo "[ ps -U root -u root u ]"
                 echo
                 echo "*** For more help type: 'man ps'"
                 echo "                        'ps --help'"
                 echo
                 echo "Now run ps. Usage: ps -ejH"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 pstree' '* | 'sudo pstree '* | 'sudo pstree')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Ss] | [Pp][Ss][Tt]*)
                 APP_NAME="pstree"
                 f_application_run
                 ;;
                 pswatcher' '* | 'sudo pswatcher '* | 'sudo pswatcher')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Ss] | [Pp][Ss][Ww]*)
                 APP_NAME="pswatcher"
                 clear # Blank the screen.
                 echo "pswatcher - Monitor a system via ps-like commands."
                 echo
                 echo "This program runs the ps command periodically and triggers commands on matches."
                 echo "The match patterns are Perl regular expressions which can refer to the process"
                 echo "information via variables."
                 echo "For example it can be used to ensure that a daemon is running, or is not"
                 echo "running too many times. It can also be used to determine when a process has"
                 echo "consumed too many resources, perhaps due to a memory leak."
                 echo "Homepage: http://ps-watcher.sourceforge.net/"
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 pwdx' '* | 'sudo pwdx '* | 'sudo pwdx')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Pp] | [Pp][Ww]*)
                 APP_NAME="pwdx"
                 f_application_run
                 ;;
                 strace' '* | 'sudo strace '* | 'sudo strace')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ss] | [Ss][Tt]*)
                 APP_NAME="strace"
                 f_application_run
                 ;;
                 sysctl' '* | 'sudo sysctl '* | 'sudo sysctl')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ss] | [Ss][Yy]*)
                 APP_NAME="sysctl"
                 clear # Blank the screen.
                 echo "sysctl - Configure kernel parameters at runtime."
                 echo
                 echo "sysctl is used to modify kernel parameters at runtime."
                 echo "The parameters available are those listed under /proc/sys/."
                 echo "Procfs is required for sysctl support in Linux.  You can use sysctl to both"
                 echo "read and write sysctl data."
                 echo
                 echo "Usage:"
                 echo "       sysctl [-n] [-e] variable ..."
                 echo "       sysctl [-n] [-e] [-q] -w variable=value ..."
                 echo "       sysctl [-n] [-e] [-q] -p [filename]"
                 echo "       sysctl [-n] [-e] -a"
                 echo "       sysctl [-n] [-e] -A"
                 echo
                 echo "EXAMPLES"
                 echo "       /sbin/sysctl -a"
                 echo "       /sbin/sysctl -n kernel.hostname"
                 echo "       /sbin/sysctl -w kernel.domainname='example.com'"
                 echo "       /sbin/sysctl -p /etc/sysctl.conf"
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 top' '* | 'sudo top '* | 'sudo top')
                 APP_NAME=$CHOICE_APP
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
                 [Tt] | [Tt][Oo]*)
                 APP_NAME="top"
                 f_how_to_quit_application "q"
                 f_application_run
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 ;;
            esac                # End of System Process Applications case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of System Process Applications until loop.
} # End of function f_menu_app_sys_process
#
# +----------------------------------------+
# |    Function f_menu_app_sys_screens     |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_screens () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ]
      do    # Start of System Screens until loop.
            #MSC byobu  - Multiple sessions.
            #MSC dtach  - Emulates detach feature of screen.
            #MSC dvtm   - dwm-style (tiling) window manager.
            #MSC fbterm - Fast terminal emulator, multiple fonts, multiple windows.
            #MSC screen - Multiple sessions via split or pager screens.
            #MSC vlock  - Locks virtual console or current terminal.
            #MSC tmux   - Multiple sessions with multiplexing.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="System Screens Menu"
            DELIMITER="#MSC" #MSC This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of System Screens case statement.
                 byobu' '* | 'sudo byobu '* | 'sudo byobu')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Bb] | [Bb][Yy]*)
                 APP_NAME="byobu"
                 f_application_run
                 ;;
                 dtach' '* | 'sudo dtach '* | 'sudo dtach')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Dd] | [Dd][Tt]*)
                 APP_NAME="dtach"
                 f_application_run
                 ;;
                 dvtm' '* | 'sudo dvtm '* | 'sudo dvtm')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Dd] | [Dd][Vv]*)
                 APP_NAME="dvtm"
                 f_application_run
                 ;;
                 fbterm' '* | 'sudo fbterm '* | 'sudo fbterm')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ff] | [Ff][Bb]*)
                 APP_NAME="fbterm"
                 f_application_run
                 ;;
                 screen' '* | 'sudo screen '* | 'sudo screen')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ss] | [Ss][Cc]*)
                 APP_NAME="screen"
                 clear # Blank the screen.
                 echo "screen - Multiple screen-window sessions."
                 echo 
                 echo "Usage:"
                 echo "Ctrl-A <double-quote> List all windows."
                 echo "Ctrl-A N     Show window title."
                 echo "Ctrl-A a     Name title of the window."
                 echo
                 echo "Ctrl-A c     Create new window."
                 echo "Ctrl-A n     Switch to next window."
                 echo "Ctrl-A p     Switch to previous window."
                 echo "Ctrl-A l     Refresh window."
                 echo "Ctrl-A <single-quote> Prompt window number to use."
                 echo "Ctrl-A (0-9 or -)  Switch to window number to use."
                 echo
                 echo "Ctrl-A k     Kill window."
                 echo "Ctrl-A S     Split window horizontally."
                 echo "Ctrl-A <tab> Toggle between split window areas."
                 echo "Ctrl-A x     Kill split window area."
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 tmux' '* | 'sudo tmux '* | 'sudo tmux')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Tt] | [Tt][Mm]*)
                 APP_NAME="tmux"
                 f_application_run
                 ;;
                 vlock' '* | 'sudo vlock '* | 'sudo vlock')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Vv] | [Vv][Ll]*)
                 APP_NAME="vlock"
                 f_application_run
                 ;;
            esac                # End of System Screens case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of System Screens until loop.
} # End of f_menu_app_sys_screens
#
# +----------------------------------------+
# |    Function f_menu_app_sys_software    |
# +----------------------------------------+
#
#  Inputs: None. 
#    Uses: CHOICE_APP, MAX.
# Outputs: ERROR, MENU_TITLE, DELIMITER, PRESS_KEY, CHOICE_APP
#
f_menu_app_sys_software () {
      f_initvars_menu_app
      until [ $CHOICE_APP -eq 0 ] 
      do    # Start of System Softare Applications until loop.
            #MSF alien    - Converts rpm to deb packages.
            #MSF apt      - Debian package manager.
            #MSF aptitude - Debian package manager.
            #MSF aptoncd  - GUI makes a CD of Debian packages for installation w/o Internet.
            #MSF dpkg     - Debian package manager.
            #MSF rpm      - RPM (Red Hat) package manager.
            #MSF synaptic - GUI Debian package manager.
            #MSF unshield - Extracts CAB files from InstallShield installers for MS Windows.
            #MSF urpmi    - Mandriva, Mageia package manager.
            #MSF YaST     - GUI OpenSUSE package manager.
            #MSF yum      - "Yellow Dog Updated" package manager.
            #MSF zypper   - OpenSUSE package manager on which is based YaST GUI.
            #
            PRESS_KEY=1 # Display "Press 'Enter' key to continue."
            THIS_FILE="mod_apps-system.lib"
            MENU_TITLE="System Software Applications Menu"
            DELIMITER="#MSF" #MSF This 3rd field prevents awk from printing this line into menu options. 
            f_show_menu $MENU_TITLE $DELIMITER 
            #
            read CHOICE_APP
            #
            f_common_app_menu
            f_application_help
            ERROR=0 # Reset error flag.
            APP_NAME="" # Set application name to null value.
            #
            case $CHOICE_APP in # Start of System Software Applications case statement.
                 alien' '* | 'sudo alien '* | 'sudo alien')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Aa] | [Aa][Ll]*)
                 APP_NAME="alien"
                 f_application_run
                 ;;
                 apt' '* | 'apt-'* | 'sudo apt' | 'sudo apt '* | 'sudo apt-'*)
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Aa] | [Aa][Pp] | [Aa][Pp][Tt])
                 APP_NAME="apt"
                 clear # Blank the screen.
                 echo "apt - Debian package manager."
                 echo
                 echo "Usage:"
                 echo "apt-cache showpkg <package name> Show package general information."
                 echo "apt-cache show <package name> Show package description and information."
                 echo "apt-cache depends <package name> Show package dependency information."
                 echo "apt-cache rdepends <package name> Show package reverse dependency information."
                 echo "apt-cache unmet <package name> Show package's unmet dependencies."
                 echo "apt-get check Check for broken dependencies."
                 echo "apt-get update Updates package information prior to updating or installing."
                 echo "apt-get upgrade Upgrade packages to latest versions."
                 echo "apt-get dist-upgrade Usually used after an 'apt-get upgrade' to upgrade kernel."
                 echo "apt-get install <package name> Installs a new software package."
                 echo "apt-get remove <package name> Uninstalls a software package."
                 echo "apt-get purge <package name> Uninstalls a package and its configuration files."
                 echo "apt-get autoclean Remove obsolete packages from the local repository."
                 echo "apt-get autoremove remove packages that are no longer needed."
                 echo
                 echo "*** For more help type: man apt / man apt-cache / man apt-get"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 aptitude' '* | 'sudo aptitude '* | 'sudo aptitude')
                 APP_NAME=$CHOICE_APP
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 f_application_run
                 ;;
                 [Aa] | [Aa][Pp] | [Aa][Pp][Tt] | [Aa][Pp][Tt][Ii]*)
                 APP_NAME="aptitude"
                 clear # Blank the screen.
                 echo "aptitude - Debian package manager."
                 echo 
                 echo "Usage:"
                 echo "aptitude [-S fname] [-u|-i]"
                 echo "aptitude [OPTIONS] <ACTION> ..."
                 echo 
                 echo "Options:"
                 echo " -h    This help text."
                 echo " -D    Show the dependencies of automatically changed packages."
                 echo " -v    Display extra information. (may be supplied multiple times)."
                 echo " -f    Aggressively try to fix broken packages."
                 echo  
                 echo "Actions (if none is specified, aptitude will enter interactive mode):"
                 echo "search    - Search for a package by name and/or expression."
                 echo "show      - Display detailed information about a package."
                 echo "install   - Install/upgrade packages."
                 echo "reinstall - Download and (possibly) reinstall a currently installed package."
                 echo "remove    - Remove packages."
                 echo "purge     - Remove packages and their configuration files."
                 echo "update    - Download lists of new/upgradable packages."
                 echo
                 echo "*** For more help type: man apt / man apt-cache / man apt-get"
                 f_press_enter_key_to_continue
                 PRESS_KEY=0 # Do not display "Press 'Enter' key to continue."
                 f_application_run
                 ;;
                 'aptoncd '* | 'sudo aptoncd '* | 'sudo aptoncd')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Aa] | [Aa][Pp] | [Aa][Pp][Tt] | [Aa][Pp][Tt][Oo]*)
                 APP_NAME="aptoncd"
                 clear # Blank the screen.
                 echo "APTonCD - A GUI application and is in the menu for reference only."
                 echo
                 echo "However, like many GUI applications, it can be launched by from the CLI."
                 echo "APTonCD can be launched from the command line with the 'aptoncd' command."
                 echo
                 echo "APTonCD allows you to create an installation CD with all the debian packages"
                 echo "installed on the localhost PC from the /var/cache/apt/archives/ directory."
                 echo "It is one way to backup the software installed on your PC but such would"
                 echo "have to be reconfigured afterwards."
                 echo
                 echo "APTonCD is fully supported in Ubuntu and works in Debian Etch and Sid."
                 echo
                 f_press_enter_key_to_continue
                 ;;
                 dpkg' '* | 'dpkg-'* | 'sudo dpkg '* | 'sudo dpkg' | 'sudo dpkg-'*)
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Dd] | [Dd][Pp]*)
                 APP_NAME="dpkg"
                 clear # Blank the screen.
                 echo "dpkg - Debian package manager."
                 echo
                 echo "Usage:"
                 echo "dpkg --get-selections List all installed packages."
                 echo "dpkg-query -l <package name> Show package installation status."
                 echo "dpkg-query -p <package name> Show package description and information."
                 echo "dpkg -i <package name> Installs a new software package."
                 echo "dpkg -r <package name> Uninstalls a software package."
                 echo "dpkg -P <package name> Uninstalls a package and its configuration files."
                 echo
                 echo "*** For more help type: man dpkg / man dpkg-query"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 rpm' '* | 'sudo rpm '* | 'sudo rpm')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Rr] | [Rr][Pp]*)
                 APP_NAME="rpm"
                 clear # Blank the screen.
                 echo "rpm - RPM (Red Hat) package manager."
                 echo
                 echo "Usage:"
                 echo "rpm -q <package name> Show package description and information."
                 echo "rpm --query <package name> Show package description and information."
                 echo "rpm -U <package name> Upgrade/Install a package."
                 echo "rpm --upgrade <package name> Upgrade/Install a package."
                 echo "rpm -I <package name> Installs new software packages."
                 echo "rpm --install <package name> Installs new software packages."
                 echo "rpm -e <package name> Uninstalls software packages."
                 echo "rpm --erase <package name> Uninstalls software packages."
                 echo "rpm -V <package name> Verifies packages."
                 echo "rpm --verify <package name> Verifies packages."
                 echo "rpm -F <package name> Freshen (upgrade) installed packages."
                 echo "rpm --freshen<package name> Freshen (upgrade) installed packages."
                 echo "rpm --initdb Initialize package database."
                 echo "rpm --rebuilddb Rebuild package database."
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 synaptic' '* | 'sudo synaptic '* | 'sudo synaptic')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Ss] | [Ss][Yy]*)
                 APP_NAME="synaptic"
                 clear # Blank the screen.
                 echo "Synaptic - A GUI package manager and is in the menu for reference only."
                 echo
                 echo "However, like many GUI applications, it can be launched by from the CLI."
                 echo "Synaptic can be launched from the command line with the 'synaptic' command."
                 echo
                 f_press_enter_key_to_continue
                 ;;
                 unshield' '* | 'sudo unshield '* | 'sudo unshield')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Uu] | Uu][Nn]*)
                 APP_NAME="unshield"
                 f_application_run
                 ;;
                 urpmi' '* |  'sudo urpmi '* | 'sudo urpmi')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Uu] | [Uu][Rr]*)
                 APP_NAME="urpmi"
                 f_application_run
                 ;;
                 yast' '* | 'sudo yast '* | 'sudo yast')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Yy] | [Yy][Aa]*)
                 APP_NAME="yast"
                 clear # Blank the screen.
                 echo "YaST - A GUI package manager and is in the menu for reference only."
                 echo
                 echo "However, like many GUI applications, it can be launched by from the CLI."
                 echo "YaST can be launched from the command line with the 'yast' command."
                 echo
                 f_press_enter_key_to_continue
                 ;;
                 yum' '* | 'sudo yum '* | 'sudo yum')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Yy] | [Yy][Uu]*)
                 APP_NAME="yum"
                 clear # Blank the screen.
                 echo "yum - 'Yellow Dog Updated' package manager."
                 echo
                 echo "Usage:"
                 echo "yum upgrade <package name> Upgrade/Install a package."
                 echo "yum -list <package name> Show package description and information."
                 echo "yum search <text> Searches package names, descriptions, summaries."
                 echo "yum provides <text> Searches files, packages providing a function."
                 echo "yum update Upgrade packages to latest versions."
                 echo "yum install <package name> Installs new software packages."
                 echo "yum groupinstall <application name> Installs new software packages."
                 echo "yum remove <package name> Uninstalls software packages."
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
                 zypper' '* | 'sudo zypper '* | 'sudo zypper')
                 APP_NAME=$CHOICE_APP
                 f_application_run
                 ;;
                 [Zz] | [Zz][Yy]*)
                 APP_NAME="zypper"
                 clear # Blank the screen.
                 echo "zypper - Zypper package manager."
                 echo
                 echo "Usage:"
                 echo "zypper search -is List installed packages."
                 echo "zypper search -d <text> searches package names, descriptions, summaries."
                 echo "zypper update Upgrade packages to latest versions."
                 echo "zypper install <package name> Installs new software packages."
                 echo "zypper remove <package name> Uninstalls software packages."
                 echo "zypper refresh Refresh repository package information."
                 echo "zypper list-updates List updates available for installed packages."
                 echo "zypper dist-upgrade Upgrade kernel to next version."
                 echo
                 echo "*** For more help type: 'man $APP_NAME'"
                 echo "                        '$APP_NAME --help'"
                 echo
                 f_press_enter_key_to_continue
                 f_application_run
                 ;;
            esac                # End of Synstem Software Applications case statement.
            #
            # Trap bad menu choices, do not echo Press enter key to continue.
            f_application_bad_menu_choice
            # If application displays information, allow user to read it.
            f_option_press_enter_key
      done  # End of Synstem Software Applications until loop.
} # End of function f_menu_app_sys_software
#
